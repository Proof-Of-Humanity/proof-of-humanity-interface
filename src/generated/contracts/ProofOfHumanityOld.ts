/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export interface ProofOfHumanityOldInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addSubmission"
      | "addSubmissionManually"
      | "addVouch"
      | "arbitratorDataList"
      | "arbitratorDisputeIDToDisputeData"
      | "challengePeriodDuration"
      | "challengeRequest"
      | "changeArbitrator"
      | "changeDurations"
      | "changeGovernor"
      | "changeLoserStakeMultiplier"
      | "changeMetaEvidence"
      | "changeRequiredNumberOfVouches"
      | "changeSharedStakeMultiplier"
      | "changeStateToPending"
      | "changeSubmissionBaseDeposit"
      | "changeWinnerStakeMultiplier"
      | "checkRequestDuplicates"
      | "executeRequest"
      | "fundAppeal"
      | "fundSubmission"
      | "getArbitratorDataListCount"
      | "getChallengeInfo"
      | "getContributions"
      | "getNumberOfVouches"
      | "getRequestInfo"
      | "getRoundInfo"
      | "getSubmissionInfo"
      | "governor"
      | "isRegistered"
      | "loserStakeMultiplier"
      | "processVouches"
      | "reapplySubmission"
      | "removeSubmission"
      | "removeSubmissionManually"
      | "removeVouch"
      | "renewalPeriodDuration"
      | "requiredNumberOfVouches"
      | "rule"
      | "sharedStakeMultiplier"
      | "submissionBaseDeposit"
      | "submissionCounter"
      | "submissionDuration"
      | "submitEvidence"
      | "vouches"
      | "winnerStakeMultiplier"
      | "withdrawFeesAndRewards"
      | "withdrawSubmission"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddSubmission"
      | "AppealContribution"
      | "ArbitratorComplete"
      | "ChallengeResolved"
      | "Dispute"
      | "Evidence"
      | "HasPaidAppealFee"
      | "MetaEvidence"
      | "ReapplySubmission"
      | "RemoveSubmission"
      | "Ruling"
      | "SubmissionChallenged"
      | "VouchAdded"
      | "VouchRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addSubmission",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSubmissionManually",
    values: [AddressLike[], string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addVouch",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitratorDataList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitratorDisputeIDToDisputeData",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "challengePeriodDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challengeRequest",
    values: [AddressLike, BigNumberish, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeArbitrator",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeDurations",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeGovernor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeLoserStakeMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMetaEvidence",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRequiredNumberOfVouches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSharedStakeMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeStateToPending",
    values: [AddressLike, AddressLike[], BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSubmissionBaseDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeWinnerStakeMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkRequestDuplicates",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRequest",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fundAppeal",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundSubmission",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getArbitratorDataListCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChallengeInfo",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContributions",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfVouches",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestInfo",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundInfo",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmissionInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "loserStakeMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processVouches",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reapplySubmission",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSubmission",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSubmissionManually",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVouch",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renewalPeriodDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredNumberOfVouches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rule",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sharedStakeMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submissionBaseDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submissionCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submissionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitEvidence",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "vouches",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "winnerStakeMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeesAndRewards",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSubmission",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSubmissionManually",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addVouch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "arbitratorDataList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arbitratorDisputeIDToDisputeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengePeriodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeArbitrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeDurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeLoserStakeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMetaEvidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRequiredNumberOfVouches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSharedStakeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeStateToPending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSubmissionBaseDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeWinnerStakeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkRequestDuplicates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundAppeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArbitratorDataListCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChallengeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfVouches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubmissionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loserStakeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processVouches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reapplySubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSubmissionManually",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVouch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewalPeriodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredNumberOfVouches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sharedStakeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissionBaseDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissionCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitEvidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vouches", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "winnerStakeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeesAndRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSubmission",
    data: BytesLike
  ): Result;
}

export namespace AddSubmissionEvent {
  export type InputTuple = [
    _submissionID: AddressLike,
    _requestID: BigNumberish
  ];
  export type OutputTuple = [_submissionID: string, _requestID: bigint];
  export interface OutputObject {
    _submissionID: string;
    _requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AppealContributionEvent {
  export type InputTuple = [
    _submissionID: AddressLike,
    _challengeID: BigNumberish,
    _party: BigNumberish,
    _contributor: AddressLike,
    _amount: BigNumberish
  ];
  export type OutputTuple = [
    _submissionID: string,
    _challengeID: bigint,
    _party: bigint,
    _contributor: string,
    _amount: bigint
  ];
  export interface OutputObject {
    _submissionID: string;
    _challengeID: bigint;
    _party: bigint;
    _contributor: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ArbitratorCompleteEvent {
  export type InputTuple = [
    _arbitrator: AddressLike,
    _governor: AddressLike,
    _submissionBaseDeposit: BigNumberish,
    _submissionDuration: BigNumberish,
    _challengePeriodDuration: BigNumberish,
    _requiredNumberOfVouches: BigNumberish,
    _sharedStakeMultiplier: BigNumberish,
    _winnerStakeMultiplier: BigNumberish,
    _loserStakeMultiplier: BigNumberish
  ];
  export type OutputTuple = [
    _arbitrator: string,
    _governor: string,
    _submissionBaseDeposit: bigint,
    _submissionDuration: bigint,
    _challengePeriodDuration: bigint,
    _requiredNumberOfVouches: bigint,
    _sharedStakeMultiplier: bigint,
    _winnerStakeMultiplier: bigint,
    _loserStakeMultiplier: bigint
  ];
  export interface OutputObject {
    _arbitrator: string;
    _governor: string;
    _submissionBaseDeposit: bigint;
    _submissionDuration: bigint;
    _challengePeriodDuration: bigint;
    _requiredNumberOfVouches: bigint;
    _sharedStakeMultiplier: bigint;
    _winnerStakeMultiplier: bigint;
    _loserStakeMultiplier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChallengeResolvedEvent {
  export type InputTuple = [
    _submissionID: AddressLike,
    _requestID: BigNumberish,
    _challengeID: BigNumberish
  ];
  export type OutputTuple = [
    _submissionID: string,
    _requestID: bigint,
    _challengeID: bigint
  ];
  export interface OutputObject {
    _submissionID: string;
    _requestID: bigint;
    _challengeID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeEvent {
  export type InputTuple = [
    _arbitrator: AddressLike,
    _disputeID: BigNumberish,
    _metaEvidenceID: BigNumberish,
    _evidenceGroupID: BigNumberish
  ];
  export type OutputTuple = [
    _arbitrator: string,
    _disputeID: bigint,
    _metaEvidenceID: bigint,
    _evidenceGroupID: bigint
  ];
  export interface OutputObject {
    _arbitrator: string;
    _disputeID: bigint;
    _metaEvidenceID: bigint;
    _evidenceGroupID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EvidenceEvent {
  export type InputTuple = [
    _arbitrator: AddressLike,
    _evidenceGroupID: BigNumberish,
    _party: AddressLike,
    _evidence: string
  ];
  export type OutputTuple = [
    _arbitrator: string,
    _evidenceGroupID: bigint,
    _party: string,
    _evidence: string
  ];
  export interface OutputObject {
    _arbitrator: string;
    _evidenceGroupID: bigint;
    _party: string;
    _evidence: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HasPaidAppealFeeEvent {
  export type InputTuple = [
    _submissionID: AddressLike,
    _challengeID: BigNumberish,
    _side: BigNumberish
  ];
  export type OutputTuple = [
    _submissionID: string,
    _challengeID: bigint,
    _side: bigint
  ];
  export interface OutputObject {
    _submissionID: string;
    _challengeID: bigint;
    _side: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetaEvidenceEvent {
  export type InputTuple = [_metaEvidenceID: BigNumberish, _evidence: string];
  export type OutputTuple = [_metaEvidenceID: bigint, _evidence: string];
  export interface OutputObject {
    _metaEvidenceID: bigint;
    _evidence: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReapplySubmissionEvent {
  export type InputTuple = [
    _submissionID: AddressLike,
    _requestID: BigNumberish
  ];
  export type OutputTuple = [_submissionID: string, _requestID: bigint];
  export interface OutputObject {
    _submissionID: string;
    _requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveSubmissionEvent {
  export type InputTuple = [
    _requester: AddressLike,
    _submissionID: AddressLike,
    _requestID: BigNumberish
  ];
  export type OutputTuple = [
    _requester: string,
    _submissionID: string,
    _requestID: bigint
  ];
  export interface OutputObject {
    _requester: string;
    _submissionID: string;
    _requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RulingEvent {
  export type InputTuple = [
    _arbitrator: AddressLike,
    _disputeID: BigNumberish,
    _ruling: BigNumberish
  ];
  export type OutputTuple = [
    _arbitrator: string,
    _disputeID: bigint,
    _ruling: bigint
  ];
  export interface OutputObject {
    _arbitrator: string;
    _disputeID: bigint;
    _ruling: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmissionChallengedEvent {
  export type InputTuple = [
    _submissionID: AddressLike,
    _requestID: BigNumberish,
    _challengeID: BigNumberish
  ];
  export type OutputTuple = [
    _submissionID: string,
    _requestID: bigint,
    _challengeID: bigint
  ];
  export interface OutputObject {
    _submissionID: string;
    _requestID: bigint;
    _challengeID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VouchAddedEvent {
  export type InputTuple = [_submissionID: AddressLike, _voucher: AddressLike];
  export type OutputTuple = [_submissionID: string, _voucher: string];
  export interface OutputObject {
    _submissionID: string;
    _voucher: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VouchRemovedEvent {
  export type InputTuple = [_submissionID: AddressLike, _voucher: AddressLike];
  export type OutputTuple = [_submissionID: string, _voucher: string];
  export interface OutputObject {
    _submissionID: string;
    _voucher: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ProofOfHumanityOld extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: ProofOfHumanityOldInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addSubmission: TypedContractMethod<
    [_evidence: string, _name: string],
    [void],
    "payable"
  >;

  addSubmissionManually: TypedContractMethod<
    [_submissionIDs: AddressLike[], _evidence: string[], _names: string[]],
    [void],
    "nonpayable"
  >;

  addVouch: TypedContractMethod<
    [_submissionID: AddressLike],
    [void],
    "nonpayable"
  >;

  arbitratorDataList: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string] & {
        arbitrator: string;
        metaEvidenceUpdates: bigint;
        arbitratorExtraData: string;
      }
    ],
    "view"
  >;

  arbitratorDisputeIDToDisputeData: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, string] & { challengeID: bigint; submissionID: string }],
    "view"
  >;

  challengePeriodDuration: TypedContractMethod<[], [bigint], "view">;

  challengeRequest: TypedContractMethod<
    [
      _submissionID: AddressLike,
      _reason: BigNumberish,
      _duplicateID: AddressLike,
      _evidence: string
    ],
    [void],
    "payable"
  >;

  changeArbitrator: TypedContractMethod<
    [_arbitrator: AddressLike, _arbitratorExtraData: BytesLike],
    [void],
    "nonpayable"
  >;

  changeDurations: TypedContractMethod<
    [
      _submissionDuration: BigNumberish,
      _renewalPeriodDuration: BigNumberish,
      _challengePeriodDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  changeGovernor: TypedContractMethod<
    [_governor: AddressLike],
    [void],
    "nonpayable"
  >;

  changeLoserStakeMultiplier: TypedContractMethod<
    [_loserStakeMultiplier: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeMetaEvidence: TypedContractMethod<
    [_registrationMetaEvidence: string, _clearingMetaEvidence: string],
    [void],
    "nonpayable"
  >;

  changeRequiredNumberOfVouches: TypedContractMethod<
    [_requiredNumberOfVouches: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeSharedStakeMultiplier: TypedContractMethod<
    [_sharedStakeMultiplier: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeStateToPending: TypedContractMethod<
    [
      _submissionID: AddressLike,
      _vouches: AddressLike[],
      _signatures: BytesLike[],
      _expirationTimestamps: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  changeSubmissionBaseDeposit: TypedContractMethod<
    [_submissionBaseDeposit: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeWinnerStakeMultiplier: TypedContractMethod<
    [_winnerStakeMultiplier: BigNumberish],
    [void],
    "nonpayable"
  >;

  checkRequestDuplicates: TypedContractMethod<
    [
      _submissionID: AddressLike,
      _requestID: BigNumberish,
      _duplicateID: AddressLike
    ],
    [boolean],
    "view"
  >;

  executeRequest: TypedContractMethod<
    [_submissionID: AddressLike],
    [void],
    "nonpayable"
  >;

  fundAppeal: TypedContractMethod<
    [
      _submissionID: AddressLike,
      _challengeID: BigNumberish,
      _side: BigNumberish
    ],
    [void],
    "payable"
  >;

  fundSubmission: TypedContractMethod<
    [_submissionID: AddressLike],
    [void],
    "payable"
  >;

  getArbitratorDataListCount: TypedContractMethod<[], [bigint], "view">;

  getChallengeInfo: TypedContractMethod<
    [
      _submissionID: AddressLike,
      _requestID: BigNumberish,
      _challengeID: BigNumberish
    ],
    [
      [bigint, string, bigint, bigint, bigint] & {
        lastRoundID: bigint;
        challenger: string;
        disputeID: bigint;
        ruling: bigint;
        duplicateSubmissionIndex: bigint;
      }
    ],
    "view"
  >;

  getContributions: TypedContractMethod<
    [
      _submissionID: AddressLike,
      _requestID: BigNumberish,
      _challengeID: BigNumberish,
      _round: BigNumberish,
      _contributor: AddressLike
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;

  getNumberOfVouches: TypedContractMethod<
    [_submissionID: AddressLike, _requestID: BigNumberish],
    [bigint],
    "view"
  >;

  getRequestInfo: TypedContractMethod<
    [_submissionID: AddressLike, _requestID: BigNumberish],
    [
      [
        boolean,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint
      ] & {
        disputed: boolean;
        resolved: boolean;
        requesterLost: boolean;
        currentReason: bigint;
        nbParallelDisputes: bigint;
        lastChallengeID: bigint;
        arbitratorDataID: bigint;
        requester: string;
        ultimateChallenger: string;
        usedReasons: bigint;
      }
    ],
    "view"
  >;

  getRoundInfo: TypedContractMethod<
    [
      _submissionID: AddressLike,
      _requestID: BigNumberish,
      _challengeID: BigNumberish,
      _round: BigNumberish
    ],
    [
      [boolean, [bigint, bigint, bigint], bigint, bigint] & {
        appealed: boolean;
        paidFees: [bigint, bigint, bigint];
        sideFunded: bigint;
        feeRewards: bigint;
      }
    ],
    "view"
  >;

  getSubmissionInfo: TypedContractMethod<
    [_submissionID: AddressLike],
    [
      [bigint, bigint, bigint, boolean, boolean, bigint] & {
        status: bigint;
        submissionTime: bigint;
        index: bigint;
        registered: boolean;
        hasVouched: boolean;
        numberOfRequests: bigint;
      }
    ],
    "view"
  >;

  governor: TypedContractMethod<[], [string], "view">;

  isRegistered: TypedContractMethod<
    [_submissionID: AddressLike],
    [boolean],
    "view"
  >;

  loserStakeMultiplier: TypedContractMethod<[], [bigint], "view">;

  processVouches: TypedContractMethod<
    [
      _submissionID: AddressLike,
      _requestID: BigNumberish,
      _iterations: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  reapplySubmission: TypedContractMethod<
    [_evidence: string, _name: string],
    [void],
    "payable"
  >;

  removeSubmission: TypedContractMethod<
    [_submissionID: AddressLike, _evidence: string],
    [void],
    "payable"
  >;

  removeSubmissionManually: TypedContractMethod<
    [_submissionID: AddressLike],
    [void],
    "nonpayable"
  >;

  removeVouch: TypedContractMethod<
    [_submissionID: AddressLike],
    [void],
    "nonpayable"
  >;

  renewalPeriodDuration: TypedContractMethod<[], [bigint], "view">;

  requiredNumberOfVouches: TypedContractMethod<[], [bigint], "view">;

  rule: TypedContractMethod<
    [_disputeID: BigNumberish, _ruling: BigNumberish],
    [void],
    "nonpayable"
  >;

  sharedStakeMultiplier: TypedContractMethod<[], [bigint], "view">;

  submissionBaseDeposit: TypedContractMethod<[], [bigint], "view">;

  submissionCounter: TypedContractMethod<[], [bigint], "view">;

  submissionDuration: TypedContractMethod<[], [bigint], "view">;

  submitEvidence: TypedContractMethod<
    [_submissionID: AddressLike, _evidence: string],
    [void],
    "nonpayable"
  >;

  vouches: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  winnerStakeMultiplier: TypedContractMethod<[], [bigint], "view">;

  withdrawFeesAndRewards: TypedContractMethod<
    [
      _beneficiary: AddressLike,
      _submissionID: AddressLike,
      _requestID: BigNumberish,
      _challengeID: BigNumberish,
      _round: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdrawSubmission: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addSubmission"
  ): TypedContractMethod<[_evidence: string, _name: string], [void], "payable">;
  getFunction(
    nameOrSignature: "addSubmissionManually"
  ): TypedContractMethod<
    [_submissionIDs: AddressLike[], _evidence: string[], _names: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addVouch"
  ): TypedContractMethod<[_submissionID: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "arbitratorDataList"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string] & {
        arbitrator: string;
        metaEvidenceUpdates: bigint;
        arbitratorExtraData: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "arbitratorDisputeIDToDisputeData"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, string] & { challengeID: bigint; submissionID: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "challengePeriodDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "challengeRequest"
  ): TypedContractMethod<
    [
      _submissionID: AddressLike,
      _reason: BigNumberish,
      _duplicateID: AddressLike,
      _evidence: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "changeArbitrator"
  ): TypedContractMethod<
    [_arbitrator: AddressLike, _arbitratorExtraData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeDurations"
  ): TypedContractMethod<
    [
      _submissionDuration: BigNumberish,
      _renewalPeriodDuration: BigNumberish,
      _challengePeriodDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeGovernor"
  ): TypedContractMethod<[_governor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeLoserStakeMultiplier"
  ): TypedContractMethod<
    [_loserStakeMultiplier: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeMetaEvidence"
  ): TypedContractMethod<
    [_registrationMetaEvidence: string, _clearingMetaEvidence: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeRequiredNumberOfVouches"
  ): TypedContractMethod<
    [_requiredNumberOfVouches: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeSharedStakeMultiplier"
  ): TypedContractMethod<
    [_sharedStakeMultiplier: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeStateToPending"
  ): TypedContractMethod<
    [
      _submissionID: AddressLike,
      _vouches: AddressLike[],
      _signatures: BytesLike[],
      _expirationTimestamps: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeSubmissionBaseDeposit"
  ): TypedContractMethod<
    [_submissionBaseDeposit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeWinnerStakeMultiplier"
  ): TypedContractMethod<
    [_winnerStakeMultiplier: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkRequestDuplicates"
  ): TypedContractMethod<
    [
      _submissionID: AddressLike,
      _requestID: BigNumberish,
      _duplicateID: AddressLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeRequest"
  ): TypedContractMethod<[_submissionID: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fundAppeal"
  ): TypedContractMethod<
    [
      _submissionID: AddressLike,
      _challengeID: BigNumberish,
      _side: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "fundSubmission"
  ): TypedContractMethod<[_submissionID: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "getArbitratorDataListCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getChallengeInfo"
  ): TypedContractMethod<
    [
      _submissionID: AddressLike,
      _requestID: BigNumberish,
      _challengeID: BigNumberish
    ],
    [
      [bigint, string, bigint, bigint, bigint] & {
        lastRoundID: bigint;
        challenger: string;
        disputeID: bigint;
        ruling: bigint;
        duplicateSubmissionIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContributions"
  ): TypedContractMethod<
    [
      _submissionID: AddressLike,
      _requestID: BigNumberish,
      _challengeID: BigNumberish,
      _round: BigNumberish,
      _contributor: AddressLike
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNumberOfVouches"
  ): TypedContractMethod<
    [_submissionID: AddressLike, _requestID: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRequestInfo"
  ): TypedContractMethod<
    [_submissionID: AddressLike, _requestID: BigNumberish],
    [
      [
        boolean,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint
      ] & {
        disputed: boolean;
        resolved: boolean;
        requesterLost: boolean;
        currentReason: bigint;
        nbParallelDisputes: bigint;
        lastChallengeID: bigint;
        arbitratorDataID: bigint;
        requester: string;
        ultimateChallenger: string;
        usedReasons: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoundInfo"
  ): TypedContractMethod<
    [
      _submissionID: AddressLike,
      _requestID: BigNumberish,
      _challengeID: BigNumberish,
      _round: BigNumberish
    ],
    [
      [boolean, [bigint, bigint, bigint], bigint, bigint] & {
        appealed: boolean;
        paidFees: [bigint, bigint, bigint];
        sideFunded: bigint;
        feeRewards: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubmissionInfo"
  ): TypedContractMethod<
    [_submissionID: AddressLike],
    [
      [bigint, bigint, bigint, boolean, boolean, bigint] & {
        status: bigint;
        submissionTime: bigint;
        index: bigint;
        registered: boolean;
        hasVouched: boolean;
        numberOfRequests: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "governor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[_submissionID: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "loserStakeMultiplier"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "processVouches"
  ): TypedContractMethod<
    [
      _submissionID: AddressLike,
      _requestID: BigNumberish,
      _iterations: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reapplySubmission"
  ): TypedContractMethod<[_evidence: string, _name: string], [void], "payable">;
  getFunction(
    nameOrSignature: "removeSubmission"
  ): TypedContractMethod<
    [_submissionID: AddressLike, _evidence: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "removeSubmissionManually"
  ): TypedContractMethod<[_submissionID: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeVouch"
  ): TypedContractMethod<[_submissionID: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renewalPeriodDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requiredNumberOfVouches"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rule"
  ): TypedContractMethod<
    [_disputeID: BigNumberish, _ruling: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sharedStakeMultiplier"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "submissionBaseDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "submissionCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "submissionDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "submitEvidence"
  ): TypedContractMethod<
    [_submissionID: AddressLike, _evidence: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vouches"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "winnerStakeMultiplier"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawFeesAndRewards"
  ): TypedContractMethod<
    [
      _beneficiary: AddressLike,
      _submissionID: AddressLike,
      _requestID: BigNumberish,
      _challengeID: BigNumberish,
      _round: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawSubmission"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AddSubmission"
  ): TypedContractEvent<
    AddSubmissionEvent.InputTuple,
    AddSubmissionEvent.OutputTuple,
    AddSubmissionEvent.OutputObject
  >;
  getEvent(
    key: "AppealContribution"
  ): TypedContractEvent<
    AppealContributionEvent.InputTuple,
    AppealContributionEvent.OutputTuple,
    AppealContributionEvent.OutputObject
  >;
  getEvent(
    key: "ArbitratorComplete"
  ): TypedContractEvent<
    ArbitratorCompleteEvent.InputTuple,
    ArbitratorCompleteEvent.OutputTuple,
    ArbitratorCompleteEvent.OutputObject
  >;
  getEvent(
    key: "ChallengeResolved"
  ): TypedContractEvent<
    ChallengeResolvedEvent.InputTuple,
    ChallengeResolvedEvent.OutputTuple,
    ChallengeResolvedEvent.OutputObject
  >;
  getEvent(
    key: "Dispute"
  ): TypedContractEvent<
    DisputeEvent.InputTuple,
    DisputeEvent.OutputTuple,
    DisputeEvent.OutputObject
  >;
  getEvent(
    key: "Evidence"
  ): TypedContractEvent<
    EvidenceEvent.InputTuple,
    EvidenceEvent.OutputTuple,
    EvidenceEvent.OutputObject
  >;
  getEvent(
    key: "HasPaidAppealFee"
  ): TypedContractEvent<
    HasPaidAppealFeeEvent.InputTuple,
    HasPaidAppealFeeEvent.OutputTuple,
    HasPaidAppealFeeEvent.OutputObject
  >;
  getEvent(
    key: "MetaEvidence"
  ): TypedContractEvent<
    MetaEvidenceEvent.InputTuple,
    MetaEvidenceEvent.OutputTuple,
    MetaEvidenceEvent.OutputObject
  >;
  getEvent(
    key: "ReapplySubmission"
  ): TypedContractEvent<
    ReapplySubmissionEvent.InputTuple,
    ReapplySubmissionEvent.OutputTuple,
    ReapplySubmissionEvent.OutputObject
  >;
  getEvent(
    key: "RemoveSubmission"
  ): TypedContractEvent<
    RemoveSubmissionEvent.InputTuple,
    RemoveSubmissionEvent.OutputTuple,
    RemoveSubmissionEvent.OutputObject
  >;
  getEvent(
    key: "Ruling"
  ): TypedContractEvent<
    RulingEvent.InputTuple,
    RulingEvent.OutputTuple,
    RulingEvent.OutputObject
  >;
  getEvent(
    key: "SubmissionChallenged"
  ): TypedContractEvent<
    SubmissionChallengedEvent.InputTuple,
    SubmissionChallengedEvent.OutputTuple,
    SubmissionChallengedEvent.OutputObject
  >;
  getEvent(
    key: "VouchAdded"
  ): TypedContractEvent<
    VouchAddedEvent.InputTuple,
    VouchAddedEvent.OutputTuple,
    VouchAddedEvent.OutputObject
  >;
  getEvent(
    key: "VouchRemoved"
  ): TypedContractEvent<
    VouchRemovedEvent.InputTuple,
    VouchRemovedEvent.OutputTuple,
    VouchRemovedEvent.OutputObject
  >;

  filters: {
    "AddSubmission(address,uint256)": TypedContractEvent<
      AddSubmissionEvent.InputTuple,
      AddSubmissionEvent.OutputTuple,
      AddSubmissionEvent.OutputObject
    >;
    AddSubmission: TypedContractEvent<
      AddSubmissionEvent.InputTuple,
      AddSubmissionEvent.OutputTuple,
      AddSubmissionEvent.OutputObject
    >;

    "AppealContribution(address,uint256,uint8,address,uint256)": TypedContractEvent<
      AppealContributionEvent.InputTuple,
      AppealContributionEvent.OutputTuple,
      AppealContributionEvent.OutputObject
    >;
    AppealContribution: TypedContractEvent<
      AppealContributionEvent.InputTuple,
      AppealContributionEvent.OutputTuple,
      AppealContributionEvent.OutputObject
    >;

    "ArbitratorComplete(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ArbitratorCompleteEvent.InputTuple,
      ArbitratorCompleteEvent.OutputTuple,
      ArbitratorCompleteEvent.OutputObject
    >;
    ArbitratorComplete: TypedContractEvent<
      ArbitratorCompleteEvent.InputTuple,
      ArbitratorCompleteEvent.OutputTuple,
      ArbitratorCompleteEvent.OutputObject
    >;

    "ChallengeResolved(address,uint256,uint256)": TypedContractEvent<
      ChallengeResolvedEvent.InputTuple,
      ChallengeResolvedEvent.OutputTuple,
      ChallengeResolvedEvent.OutputObject
    >;
    ChallengeResolved: TypedContractEvent<
      ChallengeResolvedEvent.InputTuple,
      ChallengeResolvedEvent.OutputTuple,
      ChallengeResolvedEvent.OutputObject
    >;

    "Dispute(address,uint256,uint256,uint256)": TypedContractEvent<
      DisputeEvent.InputTuple,
      DisputeEvent.OutputTuple,
      DisputeEvent.OutputObject
    >;
    Dispute: TypedContractEvent<
      DisputeEvent.InputTuple,
      DisputeEvent.OutputTuple,
      DisputeEvent.OutputObject
    >;

    "Evidence(address,uint256,address,string)": TypedContractEvent<
      EvidenceEvent.InputTuple,
      EvidenceEvent.OutputTuple,
      EvidenceEvent.OutputObject
    >;
    Evidence: TypedContractEvent<
      EvidenceEvent.InputTuple,
      EvidenceEvent.OutputTuple,
      EvidenceEvent.OutputObject
    >;

    "HasPaidAppealFee(address,uint256,uint8)": TypedContractEvent<
      HasPaidAppealFeeEvent.InputTuple,
      HasPaidAppealFeeEvent.OutputTuple,
      HasPaidAppealFeeEvent.OutputObject
    >;
    HasPaidAppealFee: TypedContractEvent<
      HasPaidAppealFeeEvent.InputTuple,
      HasPaidAppealFeeEvent.OutputTuple,
      HasPaidAppealFeeEvent.OutputObject
    >;

    "MetaEvidence(uint256,string)": TypedContractEvent<
      MetaEvidenceEvent.InputTuple,
      MetaEvidenceEvent.OutputTuple,
      MetaEvidenceEvent.OutputObject
    >;
    MetaEvidence: TypedContractEvent<
      MetaEvidenceEvent.InputTuple,
      MetaEvidenceEvent.OutputTuple,
      MetaEvidenceEvent.OutputObject
    >;

    "ReapplySubmission(address,uint256)": TypedContractEvent<
      ReapplySubmissionEvent.InputTuple,
      ReapplySubmissionEvent.OutputTuple,
      ReapplySubmissionEvent.OutputObject
    >;
    ReapplySubmission: TypedContractEvent<
      ReapplySubmissionEvent.InputTuple,
      ReapplySubmissionEvent.OutputTuple,
      ReapplySubmissionEvent.OutputObject
    >;

    "RemoveSubmission(address,address,uint256)": TypedContractEvent<
      RemoveSubmissionEvent.InputTuple,
      RemoveSubmissionEvent.OutputTuple,
      RemoveSubmissionEvent.OutputObject
    >;
    RemoveSubmission: TypedContractEvent<
      RemoveSubmissionEvent.InputTuple,
      RemoveSubmissionEvent.OutputTuple,
      RemoveSubmissionEvent.OutputObject
    >;

    "Ruling(address,uint256,uint256)": TypedContractEvent<
      RulingEvent.InputTuple,
      RulingEvent.OutputTuple,
      RulingEvent.OutputObject
    >;
    Ruling: TypedContractEvent<
      RulingEvent.InputTuple,
      RulingEvent.OutputTuple,
      RulingEvent.OutputObject
    >;

    "SubmissionChallenged(address,uint256,uint256)": TypedContractEvent<
      SubmissionChallengedEvent.InputTuple,
      SubmissionChallengedEvent.OutputTuple,
      SubmissionChallengedEvent.OutputObject
    >;
    SubmissionChallenged: TypedContractEvent<
      SubmissionChallengedEvent.InputTuple,
      SubmissionChallengedEvent.OutputTuple,
      SubmissionChallengedEvent.OutputObject
    >;

    "VouchAdded(address,address)": TypedContractEvent<
      VouchAddedEvent.InputTuple,
      VouchAddedEvent.OutputTuple,
      VouchAddedEvent.OutputObject
    >;
    VouchAdded: TypedContractEvent<
      VouchAddedEvent.InputTuple,
      VouchAddedEvent.OutputTuple,
      VouchAddedEvent.OutputObject
    >;

    "VouchRemoved(address,address)": TypedContractEvent<
      VouchRemovedEvent.InputTuple,
      VouchRemovedEvent.OutputTuple,
      VouchRemovedEvent.OutputObject
    >;
    VouchRemoved: TypedContractEvent<
      VouchRemovedEvent.InputTuple,
      VouchRemovedEvent.OutputTuple,
      VouchRemovedEvent.OutputObject
    >;
  };
}
