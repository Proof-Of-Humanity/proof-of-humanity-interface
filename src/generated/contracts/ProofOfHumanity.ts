/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace ProofOfHumanity {
  export type SignatureVouchStruct = {
    expirationTime: PromiseOrValue<BigNumberish>;
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type SignatureVouchStructOutput = [
    BigNumber,
    number,
    string,
    string
  ] & { expirationTime: BigNumber; v: number; r: string; s: string };
}

export interface ProofOfHumanityInterface extends utils.Interface {
  functions: {
    "addVouch(address,bytes20)": FunctionFragment;
    "advanceState(address,address[],(uint64,uint8,bytes32,bytes32)[])": FunctionFragment;
    "arbitratorDataList(uint256)": FunctionFragment;
    "challengePeriodDuration()": FunctionFragment;
    "challengeRequest(bytes20,uint64,uint8,string)": FunctionFragment;
    "changeArbitrator(address,bytes)": FunctionFragment;
    "changeCrossChainProofOfHumanity(address)": FunctionFragment;
    "changeDurations(uint64,uint64,uint64)": FunctionFragment;
    "changeGovernor(address)": FunctionFragment;
    "changeMetaEvidence(string,string)": FunctionFragment;
    "changeRequestBaseDeposit(uint256)": FunctionFragment;
    "changeRequiredNumberOfVouches(uint64)": FunctionFragment;
    "changeStakeMultipliers(uint256,uint256,uint256)": FunctionFragment;
    "claimHumanity(bytes20,string,string)": FunctionFragment;
    "claimHumanity(string,string)": FunctionFragment;
    "crossChainProofOfHumanity()": FunctionFragment;
    "disputeIdToData(address,uint256)": FunctionFragment;
    "executeRequest(bytes20,uint256)": FunctionFragment;
    "fundAppeal(bytes20,uint256,uint256,uint8)": FunctionFragment;
    "fundRequest(address)": FunctionFragment;
    "getArbitratorDataListCount()": FunctionFragment;
    "getChallengeInfo(bytes20,uint256,uint256)": FunctionFragment;
    "getClaimerRequestId(address)": FunctionFragment;
    "getContributions(bytes20,uint256,uint256,uint256,address)": FunctionFragment;
    "getHumanityInfo(bytes20)": FunctionFragment;
    "getNumberOfVouches(bytes20,uint256)": FunctionFragment;
    "getRequestInfo(bytes20,uint256)": FunctionFragment;
    "getRoundInfo(bytes20,uint256,uint256,uint256)": FunctionFragment;
    "governor()": FunctionFragment;
    "grantManually(bytes20,address,uint64)": FunctionFragment;
    "humanityLifespan()": FunctionFragment;
    "humans(address)": FunctionFragment;
    "initialize(address,bytes,string,string,uint256,uint64,uint64,uint64,uint256[3],uint64)": FunctionFragment;
    "initialized()": FunctionFragment;
    "isClaimed(bytes20)": FunctionFragment;
    "isHuman(address)": FunctionFragment;
    "loserStakeMultiplier()": FunctionFragment;
    "processVouches(bytes20,uint256,uint256)": FunctionFragment;
    "removeVouch(address,bytes20)": FunctionFragment;
    "renewHumanity(string)": FunctionFragment;
    "renewalPeriodDuration()": FunctionFragment;
    "requestBaseDeposit()": FunctionFragment;
    "requiredNumberOfVouches()": FunctionFragment;
    "revokeHumanity(bytes20,string)": FunctionFragment;
    "revokeManually(address)": FunctionFragment;
    "rule(uint256,uint256)": FunctionFragment;
    "sharedStakeMultiplier()": FunctionFragment;
    "submitEvidence(bytes20,uint256,string)": FunctionFragment;
    "vouches(address,address,bytes20)": FunctionFragment;
    "winnerStakeMultiplier()": FunctionFragment;
    "withdrawFeesAndRewards(address,bytes20,uint256,uint256,uint256)": FunctionFragment;
    "withdrawRequest()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addVouch"
      | "advanceState"
      | "arbitratorDataList"
      | "challengePeriodDuration"
      | "challengeRequest"
      | "changeArbitrator"
      | "changeCrossChainProofOfHumanity"
      | "changeDurations"
      | "changeGovernor"
      | "changeMetaEvidence"
      | "changeRequestBaseDeposit"
      | "changeRequiredNumberOfVouches"
      | "changeStakeMultipliers"
      | "claimHumanity(bytes20,string,string)"
      | "claimHumanity(string,string)"
      | "crossChainProofOfHumanity"
      | "disputeIdToData"
      | "executeRequest"
      | "fundAppeal"
      | "fundRequest"
      | "getArbitratorDataListCount"
      | "getChallengeInfo"
      | "getClaimerRequestId"
      | "getContributions"
      | "getHumanityInfo"
      | "getNumberOfVouches"
      | "getRequestInfo"
      | "getRoundInfo"
      | "governor"
      | "grantManually"
      | "humanityLifespan"
      | "humans"
      | "initialize"
      | "initialized"
      | "isClaimed"
      | "isHuman"
      | "loserStakeMultiplier"
      | "processVouches"
      | "removeVouch"
      | "renewHumanity"
      | "renewalPeriodDuration"
      | "requestBaseDeposit"
      | "requiredNumberOfVouches"
      | "revokeHumanity"
      | "revokeManually"
      | "rule"
      | "sharedStakeMultiplier"
      | "submitEvidence"
      | "vouches"
      | "winnerStakeMultiplier"
      | "withdrawFeesAndRewards"
      | "withdrawRequest"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addVouch",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "advanceState",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      ProofOfHumanity.SignatureVouchStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitratorDataList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "challengePeriodDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challengeRequest",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeArbitrator",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeCrossChainProofOfHumanity",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeDurations",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeGovernor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMetaEvidence",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRequestBaseDeposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRequiredNumberOfVouches",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeStakeMultipliers",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimHumanity(bytes20,string,string)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimHumanity(string,string)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "crossChainProofOfHumanity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputeIdToData",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRequest",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fundAppeal",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fundRequest",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getArbitratorDataListCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChallengeInfo",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimerRequestId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContributions",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getHumanityInfo",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfVouches",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestInfo",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundInfo",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grantManually",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "humanityLifespan",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "humans",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimed",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isHuman",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "loserStakeMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processVouches",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVouch",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "renewHumanity",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renewalPeriodDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestBaseDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredNumberOfVouches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeHumanity",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeManually",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rule",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sharedStakeMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitEvidence",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "vouches",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "winnerStakeMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeesAndRewards",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRequest",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addVouch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "advanceState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arbitratorDataList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengePeriodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeArbitrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeCrossChainProofOfHumanity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeDurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMetaEvidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRequestBaseDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRequiredNumberOfVouches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeStakeMultipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimHumanity(bytes20,string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimHumanity(string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crossChainProofOfHumanity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeIdToData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundAppeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArbitratorDataListCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChallengeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimerRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHumanityInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfVouches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantManually",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "humanityLifespan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "humans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isHuman", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "loserStakeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processVouches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVouch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewHumanity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewalPeriodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestBaseDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredNumberOfVouches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeHumanity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeManually",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sharedStakeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitEvidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vouches", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "winnerStakeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeesAndRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRequest",
    data: BytesLike
  ): Result;

  events: {
    "AppealContribution(address,uint256,uint8)": EventFragment;
    "AppealCreated(address,uint256)": EventFragment;
    "ArbitratorChanged(address,bytes)": EventFragment;
    "ChallengePeriodRestart(bytes20,uint256,uint256)": EventFragment;
    "CrossChainProxyChanged(address)": EventFragment;
    "Dispute(address,uint256,uint256,uint256)": EventFragment;
    "DurationsChanged(uint64,uint64,uint64)": EventFragment;
    "Evidence(address,uint256,address,string)": EventFragment;
    "FeesAndRewardsWithdrawn(address,bytes20,uint256,uint256,uint256)": EventFragment;
    "GovernorChanged(address)": EventFragment;
    "HumanityClaim(address,bytes20,uint256,string,string)": EventFragment;
    "HumanityGrantedManually(bytes20,address,uint64)": EventFragment;
    "HumanityRenewal(address,bytes20,uint256,string)": EventFragment;
    "HumanityRevocation(address,bytes20,uint256,string)": EventFragment;
    "HumanityRevokedManually(address)": EventFragment;
    "Initialized()": EventFragment;
    "MetaEvidence(uint256,string)": EventFragment;
    "RequestBaseDepositChanged(uint256)": EventFragment;
    "RequestChallenged(bytes20,uint256,uint256,uint8,string)": EventFragment;
    "RequestContribution(address)": EventFragment;
    "RequestExecuted(bytes20,uint256)": EventFragment;
    "RequestWithdrawn(bytes20,uint256)": EventFragment;
    "RequiredNumberOfVouchesChanged(uint64)": EventFragment;
    "Ruling(address,uint256,uint256)": EventFragment;
    "StakeMultipliersChanged(uint256,uint256,uint256)": EventFragment;
    "StateAdvanced(address)": EventFragment;
    "VouchAdded(address,address,bytes20)": EventFragment;
    "VouchRemoved(address,address,bytes20)": EventFragment;
    "VouchesProcessed(bytes20,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AppealContribution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AppealCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArbitratorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChallengePeriodRestart"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CrossChainProxyChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Dispute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DurationsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Evidence"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesAndRewardsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HumanityClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HumanityGrantedManually"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HumanityRenewal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HumanityRevocation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HumanityRevokedManually"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaEvidence"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestBaseDepositChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestChallenged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestContribution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestWithdrawn"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RequiredNumberOfVouchesChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Ruling"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeMultipliersChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StateAdvanced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VouchAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VouchRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VouchesProcessed"): EventFragment;
}

export interface AppealContributionEventObject {
  arbitrator: string;
  disputeId: BigNumber;
  side: number;
}
export type AppealContributionEvent = TypedEvent<
  [string, BigNumber, number],
  AppealContributionEventObject
>;

export type AppealContributionEventFilter =
  TypedEventFilter<AppealContributionEvent>;

export interface AppealCreatedEventObject {
  arbitrator: string;
  disputeId: BigNumber;
}
export type AppealCreatedEvent = TypedEvent<
  [string, BigNumber],
  AppealCreatedEventObject
>;

export type AppealCreatedEventFilter = TypedEventFilter<AppealCreatedEvent>;

export interface ArbitratorChangedEventObject {
  arbitrator: string;
  arbitratorExtraData: string;
}
export type ArbitratorChangedEvent = TypedEvent<
  [string, string],
  ArbitratorChangedEventObject
>;

export type ArbitratorChangedEventFilter =
  TypedEventFilter<ArbitratorChangedEvent>;

export interface ChallengePeriodRestartEventObject {
  humanityId: string;
  requestId: BigNumber;
  challengeId: BigNumber;
}
export type ChallengePeriodRestartEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ChallengePeriodRestartEventObject
>;

export type ChallengePeriodRestartEventFilter =
  TypedEventFilter<ChallengePeriodRestartEvent>;

export interface CrossChainProxyChangedEventObject {
  crossChainProofOfHumanity: string;
}
export type CrossChainProxyChangedEvent = TypedEvent<
  [string],
  CrossChainProxyChangedEventObject
>;

export type CrossChainProxyChangedEventFilter =
  TypedEventFilter<CrossChainProxyChangedEvent>;

export interface DisputeEventObject {
  _arbitrator: string;
  _disputeID: BigNumber;
  _metaEvidenceID: BigNumber;
  _evidenceGroupID: BigNumber;
}
export type DisputeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  DisputeEventObject
>;

export type DisputeEventFilter = TypedEventFilter<DisputeEvent>;

export interface DurationsChangedEventObject {
  humanityLifespan: BigNumber;
  renewalPeriodDuration: BigNumber;
  challengePeriodDuration: BigNumber;
}
export type DurationsChangedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  DurationsChangedEventObject
>;

export type DurationsChangedEventFilter =
  TypedEventFilter<DurationsChangedEvent>;

export interface EvidenceEventObject {
  _arbitrator: string;
  _evidenceGroupID: BigNumber;
  _party: string;
  _evidence: string;
}
export type EvidenceEvent = TypedEvent<
  [string, BigNumber, string, string],
  EvidenceEventObject
>;

export type EvidenceEventFilter = TypedEventFilter<EvidenceEvent>;

export interface FeesAndRewardsWithdrawnEventObject {
  beneficiary: string;
  humanityId: string;
  requestId: BigNumber;
  challengeId: BigNumber;
  round: BigNumber;
}
export type FeesAndRewardsWithdrawnEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  FeesAndRewardsWithdrawnEventObject
>;

export type FeesAndRewardsWithdrawnEventFilter =
  TypedEventFilter<FeesAndRewardsWithdrawnEvent>;

export interface GovernorChangedEventObject {
  governor: string;
}
export type GovernorChangedEvent = TypedEvent<
  [string],
  GovernorChangedEventObject
>;

export type GovernorChangedEventFilter = TypedEventFilter<GovernorChangedEvent>;

export interface HumanityClaimEventObject {
  requester: string;
  humanityId: string;
  requestId: BigNumber;
  evidence: string;
  name: string;
}
export type HumanityClaimEvent = TypedEvent<
  [string, string, BigNumber, string, string],
  HumanityClaimEventObject
>;

export type HumanityClaimEventFilter = TypedEventFilter<HumanityClaimEvent>;

export interface HumanityGrantedManuallyEventObject {
  humanityId: string;
  owner: string;
  expirationTime: BigNumber;
}
export type HumanityGrantedManuallyEvent = TypedEvent<
  [string, string, BigNumber],
  HumanityGrantedManuallyEventObject
>;

export type HumanityGrantedManuallyEventFilter =
  TypedEventFilter<HumanityGrantedManuallyEvent>;

export interface HumanityRenewalEventObject {
  requester: string;
  humanityId: string;
  requestId: BigNumber;
  evidence: string;
}
export type HumanityRenewalEvent = TypedEvent<
  [string, string, BigNumber, string],
  HumanityRenewalEventObject
>;

export type HumanityRenewalEventFilter = TypedEventFilter<HumanityRenewalEvent>;

export interface HumanityRevocationEventObject {
  requester: string;
  humanityId: string;
  requestId: BigNumber;
  evidence: string;
}
export type HumanityRevocationEvent = TypedEvent<
  [string, string, BigNumber, string],
  HumanityRevocationEventObject
>;

export type HumanityRevocationEventFilter =
  TypedEventFilter<HumanityRevocationEvent>;

export interface HumanityRevokedManuallyEventObject {
  human: string;
}
export type HumanityRevokedManuallyEvent = TypedEvent<
  [string],
  HumanityRevokedManuallyEventObject
>;

export type HumanityRevokedManuallyEventFilter =
  TypedEventFilter<HumanityRevokedManuallyEvent>;

export interface InitializedEventObject {}
export type InitializedEvent = TypedEvent<[], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MetaEvidenceEventObject {
  _metaEvidenceID: BigNumber;
  _evidence: string;
}
export type MetaEvidenceEvent = TypedEvent<
  [BigNumber, string],
  MetaEvidenceEventObject
>;

export type MetaEvidenceEventFilter = TypedEventFilter<MetaEvidenceEvent>;

export interface RequestBaseDepositChangedEventObject {
  requestBaseDeposit: BigNumber;
}
export type RequestBaseDepositChangedEvent = TypedEvent<
  [BigNumber],
  RequestBaseDepositChangedEventObject
>;

export type RequestBaseDepositChangedEventFilter =
  TypedEventFilter<RequestBaseDepositChangedEvent>;

export interface RequestChallengedEventObject {
  humanityId: string;
  requestId: BigNumber;
  challengeId: BigNumber;
  reason: number;
  evidence: string;
}
export type RequestChallengedEvent = TypedEvent<
  [string, BigNumber, BigNumber, number, string],
  RequestChallengedEventObject
>;

export type RequestChallengedEventFilter =
  TypedEventFilter<RequestChallengedEvent>;

export interface RequestContributionEventObject {
  claimer: string;
}
export type RequestContributionEvent = TypedEvent<
  [string],
  RequestContributionEventObject
>;

export type RequestContributionEventFilter =
  TypedEventFilter<RequestContributionEvent>;

export interface RequestExecutedEventObject {
  humanityId: string;
  requestId: BigNumber;
}
export type RequestExecutedEvent = TypedEvent<
  [string, BigNumber],
  RequestExecutedEventObject
>;

export type RequestExecutedEventFilter = TypedEventFilter<RequestExecutedEvent>;

export interface RequestWithdrawnEventObject {
  humanityId: string;
  requestId: BigNumber;
}
export type RequestWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  RequestWithdrawnEventObject
>;

export type RequestWithdrawnEventFilter =
  TypedEventFilter<RequestWithdrawnEvent>;

export interface RequiredNumberOfVouchesChangedEventObject {
  requiredNumberOfVouches: BigNumber;
}
export type RequiredNumberOfVouchesChangedEvent = TypedEvent<
  [BigNumber],
  RequiredNumberOfVouchesChangedEventObject
>;

export type RequiredNumberOfVouchesChangedEventFilter =
  TypedEventFilter<RequiredNumberOfVouchesChangedEvent>;

export interface RulingEventObject {
  _arbitrator: string;
  _disputeID: BigNumber;
  _ruling: BigNumber;
}
export type RulingEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RulingEventObject
>;

export type RulingEventFilter = TypedEventFilter<RulingEvent>;

export interface StakeMultipliersChangedEventObject {
  sharedMultiplier: BigNumber;
  winnerMultiplier: BigNumber;
  loserMultiplier: BigNumber;
}
export type StakeMultipliersChangedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  StakeMultipliersChangedEventObject
>;

export type StakeMultipliersChangedEventFilter =
  TypedEventFilter<StakeMultipliersChangedEvent>;

export interface StateAdvancedEventObject {
  claimer: string;
}
export type StateAdvancedEvent = TypedEvent<[string], StateAdvancedEventObject>;

export type StateAdvancedEventFilter = TypedEventFilter<StateAdvancedEvent>;

export interface VouchAddedEventObject {
  voucher: string;
  vouched: string;
  humanityId: string;
}
export type VouchAddedEvent = TypedEvent<
  [string, string, string],
  VouchAddedEventObject
>;

export type VouchAddedEventFilter = TypedEventFilter<VouchAddedEvent>;

export interface VouchRemovedEventObject {
  voucher: string;
  vouched: string;
  humanityId: string;
}
export type VouchRemovedEvent = TypedEvent<
  [string, string, string],
  VouchRemovedEventObject
>;

export type VouchRemovedEventFilter = TypedEventFilter<VouchRemovedEvent>;

export interface VouchesProcessedEventObject {
  humanityId: string;
  requestId: BigNumber;
  endIndex: BigNumber;
}
export type VouchesProcessedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  VouchesProcessedEventObject
>;

export type VouchesProcessedEventFilter =
  TypedEventFilter<VouchesProcessedEvent>;

export interface ProofOfHumanity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProofOfHumanityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addVouch(
      _human: PromiseOrValue<string>,
      _humanityId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    advanceState(
      _claimer: PromiseOrValue<string>,
      _vouches: PromiseOrValue<string>[],
      _signatureVouches: ProofOfHumanity.SignatureVouchStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    arbitratorDataList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        metaEvidenceUpdates: BigNumber;
        arbitrator: string;
        arbitratorExtraData: string;
      }
    >;

    challengePeriodDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    challengeRequest(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _reason: PromiseOrValue<BigNumberish>,
      _evidence: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeArbitrator(
      _arbitrator: PromiseOrValue<string>,
      _arbitratorExtraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeCrossChainProofOfHumanity(
      _crossChainProofOfHumanity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeDurations(
      _humanityLifespan: PromiseOrValue<BigNumberish>,
      _renewalPeriodDuration: PromiseOrValue<BigNumberish>,
      _challengePeriodDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeGovernor(
      _governor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeMetaEvidence(
      _registrationMetaEvidence: PromiseOrValue<string>,
      _clearingMetaEvidence: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeRequestBaseDeposit(
      _requestBaseDeposit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeRequiredNumberOfVouches(
      _requiredNumberOfVouches: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeStakeMultipliers(
      _sharedStakeMultiplier: PromiseOrValue<BigNumberish>,
      _winnerStakeMultiplier: PromiseOrValue<BigNumberish>,
      _loserStakeMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "claimHumanity(bytes20,string,string)"(
      _humanityId: PromiseOrValue<BytesLike>,
      _evidence: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "claimHumanity(string,string)"(
      _evidence: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    crossChainProofOfHumanity(overrides?: CallOverrides): Promise<[string]>;

    disputeIdToData(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        requestId: BigNumber;
        challengeId: BigNumber;
        humanityId: string;
      }
    >;

    executeRequest(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fundAppeal(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _challengeId: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fundRequest(
      _claimer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getArbitratorDataListCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getChallengeInfo(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _challengeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, number] & {
        lastRoundId: number;
        challenger: string;
        disputeId: BigNumber;
        ruling: number;
      }
    >;

    getClaimerRequestId(
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getContributions(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _challengeId: PromiseOrValue<BigNumberish>,
      _round: PromiseOrValue<BigNumberish>,
      _contributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        forRequester: BigNumber;
        forChallenger: BigNumber;
      }
    >;

    getHumanityInfo(
      _humanityId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber, string, BigNumber] & {
        vouching: boolean;
        pendingRevocation: boolean;
        nbPendingRequests: BigNumber;
        expirationTime: BigNumber;
        owner: string;
        nbRequests: BigNumber;
      }
    >;

    getNumberOfVouches(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRequestInfo(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        number,
        number,
        number,
        BigNumber,
        string,
        string,
        number,
        number
      ] & {
        requesterLost: boolean;
        usedReasons: number;
        arbitratorDataId: number;
        lastChallengeId: number;
        challengePeriodEnd: BigNumber;
        requester: string;
        ultimateChallenger: string;
        status: number;
        currentReason: number;
      }
    >;

    getRoundInfo(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _challengeId: PromiseOrValue<BigNumberish>,
      _round: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, number, BigNumber] & {
        appealed: boolean;
        paidFeesRequester: BigNumber;
        paidFeesChallenger: BigNumber;
        sideFunded: number;
        feeRewards: BigNumber;
      }
    >;

    governor(overrides?: CallOverrides): Promise<[string]>;

    grantManually(
      _humanityId: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      _expirationTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    humanityLifespan(overrides?: CallOverrides): Promise<[BigNumber]>;

    humans(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _arbitrator: PromiseOrValue<string>,
      _arbitratorExtraData: PromiseOrValue<BytesLike>,
      _registrationMetaEvidence: PromiseOrValue<string>,
      _clearingMetaEvidence: PromiseOrValue<string>,
      _requestBaseDeposit: PromiseOrValue<BigNumberish>,
      _humanityLifespan: PromiseOrValue<BigNumberish>,
      _renewalPeriodDuration: PromiseOrValue<BigNumberish>,
      _challengePeriodDuration: PromiseOrValue<BigNumberish>,
      _multipliers: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _requiredNumberOfVouches: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    isClaimed(
      _humanityId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isHuman(
      _humanId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    loserStakeMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    processVouches(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _iterations: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeVouch(
      _human: PromiseOrValue<string>,
      _humanityId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renewHumanity(
      _evidence: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renewalPeriodDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    requestBaseDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    requiredNumberOfVouches(overrides?: CallOverrides): Promise<[BigNumber]>;

    revokeHumanity(
      _humanityId: PromiseOrValue<BytesLike>,
      _evidence: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeManually(
      _humanId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rule(
      _disputeId: PromiseOrValue<BigNumberish>,
      _ruling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sharedStakeMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    submitEvidence(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _evidence: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vouches(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    winnerStakeMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFeesAndRewards(
      _beneficiary: PromiseOrValue<string>,
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _challengeId: PromiseOrValue<BigNumberish>,
      _round: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawRequest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addVouch(
    _human: PromiseOrValue<string>,
    _humanityId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  advanceState(
    _claimer: PromiseOrValue<string>,
    _vouches: PromiseOrValue<string>[],
    _signatureVouches: ProofOfHumanity.SignatureVouchStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  arbitratorDataList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string] & {
      metaEvidenceUpdates: BigNumber;
      arbitrator: string;
      arbitratorExtraData: string;
    }
  >;

  challengePeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

  challengeRequest(
    _humanityId: PromiseOrValue<BytesLike>,
    _requestId: PromiseOrValue<BigNumberish>,
    _reason: PromiseOrValue<BigNumberish>,
    _evidence: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeArbitrator(
    _arbitrator: PromiseOrValue<string>,
    _arbitratorExtraData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeCrossChainProofOfHumanity(
    _crossChainProofOfHumanity: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeDurations(
    _humanityLifespan: PromiseOrValue<BigNumberish>,
    _renewalPeriodDuration: PromiseOrValue<BigNumberish>,
    _challengePeriodDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeGovernor(
    _governor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeMetaEvidence(
    _registrationMetaEvidence: PromiseOrValue<string>,
    _clearingMetaEvidence: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeRequestBaseDeposit(
    _requestBaseDeposit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeRequiredNumberOfVouches(
    _requiredNumberOfVouches: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeStakeMultipliers(
    _sharedStakeMultiplier: PromiseOrValue<BigNumberish>,
    _winnerStakeMultiplier: PromiseOrValue<BigNumberish>,
    _loserStakeMultiplier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "claimHumanity(bytes20,string,string)"(
    _humanityId: PromiseOrValue<BytesLike>,
    _evidence: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "claimHumanity(string,string)"(
    _evidence: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  crossChainProofOfHumanity(overrides?: CallOverrides): Promise<string>;

  disputeIdToData(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      requestId: BigNumber;
      challengeId: BigNumber;
      humanityId: string;
    }
  >;

  executeRequest(
    _humanityId: PromiseOrValue<BytesLike>,
    _requestId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fundAppeal(
    _humanityId: PromiseOrValue<BytesLike>,
    _requestId: PromiseOrValue<BigNumberish>,
    _challengeId: PromiseOrValue<BigNumberish>,
    _side: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fundRequest(
    _claimer: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getArbitratorDataListCount(overrides?: CallOverrides): Promise<BigNumber>;

  getChallengeInfo(
    _humanityId: PromiseOrValue<BytesLike>,
    _requestId: PromiseOrValue<BigNumberish>,
    _challengeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, string, BigNumber, number] & {
      lastRoundId: number;
      challenger: string;
      disputeId: BigNumber;
      ruling: number;
    }
  >;

  getClaimerRequestId(
    _claimer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getContributions(
    _humanityId: PromiseOrValue<BytesLike>,
    _requestId: PromiseOrValue<BigNumberish>,
    _challengeId: PromiseOrValue<BigNumberish>,
    _round: PromiseOrValue<BigNumberish>,
    _contributor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      forRequester: BigNumber;
      forChallenger: BigNumber;
    }
  >;

  getHumanityInfo(
    _humanityId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber, BigNumber, string, BigNumber] & {
      vouching: boolean;
      pendingRevocation: boolean;
      nbPendingRequests: BigNumber;
      expirationTime: BigNumber;
      owner: string;
      nbRequests: BigNumber;
    }
  >;

  getNumberOfVouches(
    _humanityId: PromiseOrValue<BytesLike>,
    _requestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRequestInfo(
    _humanityId: PromiseOrValue<BytesLike>,
    _requestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      number,
      number,
      number,
      BigNumber,
      string,
      string,
      number,
      number
    ] & {
      requesterLost: boolean;
      usedReasons: number;
      arbitratorDataId: number;
      lastChallengeId: number;
      challengePeriodEnd: BigNumber;
      requester: string;
      ultimateChallenger: string;
      status: number;
      currentReason: number;
    }
  >;

  getRoundInfo(
    _humanityId: PromiseOrValue<BytesLike>,
    _requestId: PromiseOrValue<BigNumberish>,
    _challengeId: PromiseOrValue<BigNumberish>,
    _round: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, number, BigNumber] & {
      appealed: boolean;
      paidFeesRequester: BigNumber;
      paidFeesChallenger: BigNumber;
      sideFunded: number;
      feeRewards: BigNumber;
    }
  >;

  governor(overrides?: CallOverrides): Promise<string>;

  grantManually(
    _humanityId: PromiseOrValue<BytesLike>,
    _owner: PromiseOrValue<string>,
    _expirationTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  humanityLifespan(overrides?: CallOverrides): Promise<BigNumber>;

  humans(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _arbitrator: PromiseOrValue<string>,
    _arbitratorExtraData: PromiseOrValue<BytesLike>,
    _registrationMetaEvidence: PromiseOrValue<string>,
    _clearingMetaEvidence: PromiseOrValue<string>,
    _requestBaseDeposit: PromiseOrValue<BigNumberish>,
    _humanityLifespan: PromiseOrValue<BigNumberish>,
    _renewalPeriodDuration: PromiseOrValue<BigNumberish>,
    _challengePeriodDuration: PromiseOrValue<BigNumberish>,
    _multipliers: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    _requiredNumberOfVouches: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  isClaimed(
    _humanityId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isHuman(
    _humanId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  loserStakeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  processVouches(
    _humanityId: PromiseOrValue<BytesLike>,
    _requestId: PromiseOrValue<BigNumberish>,
    _iterations: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeVouch(
    _human: PromiseOrValue<string>,
    _humanityId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renewHumanity(
    _evidence: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renewalPeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

  requestBaseDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  requiredNumberOfVouches(overrides?: CallOverrides): Promise<BigNumber>;

  revokeHumanity(
    _humanityId: PromiseOrValue<BytesLike>,
    _evidence: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeManually(
    _humanId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rule(
    _disputeId: PromiseOrValue<BigNumberish>,
    _ruling: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sharedStakeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  submitEvidence(
    _humanityId: PromiseOrValue<BytesLike>,
    _requestId: PromiseOrValue<BigNumberish>,
    _evidence: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vouches(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  winnerStakeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFeesAndRewards(
    _beneficiary: PromiseOrValue<string>,
    _humanityId: PromiseOrValue<BytesLike>,
    _requestId: PromiseOrValue<BigNumberish>,
    _challengeId: PromiseOrValue<BigNumberish>,
    _round: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawRequest(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addVouch(
      _human: PromiseOrValue<string>,
      _humanityId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    advanceState(
      _claimer: PromiseOrValue<string>,
      _vouches: PromiseOrValue<string>[],
      _signatureVouches: ProofOfHumanity.SignatureVouchStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    arbitratorDataList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        metaEvidenceUpdates: BigNumber;
        arbitrator: string;
        arbitratorExtraData: string;
      }
    >;

    challengePeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    challengeRequest(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _reason: PromiseOrValue<BigNumberish>,
      _evidence: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeArbitrator(
      _arbitrator: PromiseOrValue<string>,
      _arbitratorExtraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeCrossChainProofOfHumanity(
      _crossChainProofOfHumanity: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeDurations(
      _humanityLifespan: PromiseOrValue<BigNumberish>,
      _renewalPeriodDuration: PromiseOrValue<BigNumberish>,
      _challengePeriodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeGovernor(
      _governor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeMetaEvidence(
      _registrationMetaEvidence: PromiseOrValue<string>,
      _clearingMetaEvidence: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeRequestBaseDeposit(
      _requestBaseDeposit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeRequiredNumberOfVouches(
      _requiredNumberOfVouches: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeStakeMultipliers(
      _sharedStakeMultiplier: PromiseOrValue<BigNumberish>,
      _winnerStakeMultiplier: PromiseOrValue<BigNumberish>,
      _loserStakeMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimHumanity(bytes20,string,string)"(
      _humanityId: PromiseOrValue<BytesLike>,
      _evidence: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimHumanity(string,string)"(
      _evidence: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    crossChainProofOfHumanity(overrides?: CallOverrides): Promise<string>;

    disputeIdToData(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        requestId: BigNumber;
        challengeId: BigNumber;
        humanityId: string;
      }
    >;

    executeRequest(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fundAppeal(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _challengeId: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fundRequest(
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getArbitratorDataListCount(overrides?: CallOverrides): Promise<BigNumber>;

    getChallengeInfo(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _challengeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, number] & {
        lastRoundId: number;
        challenger: string;
        disputeId: BigNumber;
        ruling: number;
      }
    >;

    getClaimerRequestId(
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContributions(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _challengeId: PromiseOrValue<BigNumberish>,
      _round: PromiseOrValue<BigNumberish>,
      _contributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        forRequester: BigNumber;
        forChallenger: BigNumber;
      }
    >;

    getHumanityInfo(
      _humanityId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber, string, BigNumber] & {
        vouching: boolean;
        pendingRevocation: boolean;
        nbPendingRequests: BigNumber;
        expirationTime: BigNumber;
        owner: string;
        nbRequests: BigNumber;
      }
    >;

    getNumberOfVouches(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestInfo(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        number,
        number,
        number,
        BigNumber,
        string,
        string,
        number,
        number
      ] & {
        requesterLost: boolean;
        usedReasons: number;
        arbitratorDataId: number;
        lastChallengeId: number;
        challengePeriodEnd: BigNumber;
        requester: string;
        ultimateChallenger: string;
        status: number;
        currentReason: number;
      }
    >;

    getRoundInfo(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _challengeId: PromiseOrValue<BigNumberish>,
      _round: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, number, BigNumber] & {
        appealed: boolean;
        paidFeesRequester: BigNumber;
        paidFeesChallenger: BigNumber;
        sideFunded: number;
        feeRewards: BigNumber;
      }
    >;

    governor(overrides?: CallOverrides): Promise<string>;

    grantManually(
      _humanityId: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      _expirationTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    humanityLifespan(overrides?: CallOverrides): Promise<BigNumber>;

    humans(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _arbitrator: PromiseOrValue<string>,
      _arbitratorExtraData: PromiseOrValue<BytesLike>,
      _registrationMetaEvidence: PromiseOrValue<string>,
      _clearingMetaEvidence: PromiseOrValue<string>,
      _requestBaseDeposit: PromiseOrValue<BigNumberish>,
      _humanityLifespan: PromiseOrValue<BigNumberish>,
      _renewalPeriodDuration: PromiseOrValue<BigNumberish>,
      _challengePeriodDuration: PromiseOrValue<BigNumberish>,
      _multipliers: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _requiredNumberOfVouches: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    isClaimed(
      _humanityId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isHuman(
      _humanId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    loserStakeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    processVouches(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _iterations: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeVouch(
      _human: PromiseOrValue<string>,
      _humanityId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    renewHumanity(
      _evidence: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renewalPeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    requestBaseDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    requiredNumberOfVouches(overrides?: CallOverrides): Promise<BigNumber>;

    revokeHumanity(
      _humanityId: PromiseOrValue<BytesLike>,
      _evidence: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeManually(
      _humanId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { expirationTime: BigNumber; humanityId: string }
    >;

    rule(
      _disputeId: PromiseOrValue<BigNumberish>,
      _ruling: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sharedStakeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    submitEvidence(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _evidence: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vouches(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    winnerStakeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeesAndRewards(
      _beneficiary: PromiseOrValue<string>,
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _challengeId: PromiseOrValue<BigNumberish>,
      _round: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawRequest(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AppealContribution(address,uint256,uint8)"(
      arbitrator?: null,
      disputeId?: null,
      side?: null
    ): AppealContributionEventFilter;
    AppealContribution(
      arbitrator?: null,
      disputeId?: null,
      side?: null
    ): AppealContributionEventFilter;

    "AppealCreated(address,uint256)"(
      arbitrator?: null,
      disputeId?: null
    ): AppealCreatedEventFilter;
    AppealCreated(
      arbitrator?: null,
      disputeId?: null
    ): AppealCreatedEventFilter;

    "ArbitratorChanged(address,bytes)"(
      arbitrator?: null,
      arbitratorExtraData?: null
    ): ArbitratorChangedEventFilter;
    ArbitratorChanged(
      arbitrator?: null,
      arbitratorExtraData?: null
    ): ArbitratorChangedEventFilter;

    "ChallengePeriodRestart(bytes20,uint256,uint256)"(
      humanityId?: null,
      requestId?: null,
      challengeId?: null
    ): ChallengePeriodRestartEventFilter;
    ChallengePeriodRestart(
      humanityId?: null,
      requestId?: null,
      challengeId?: null
    ): ChallengePeriodRestartEventFilter;

    "CrossChainProxyChanged(address)"(
      crossChainProofOfHumanity?: null
    ): CrossChainProxyChangedEventFilter;
    CrossChainProxyChanged(
      crossChainProofOfHumanity?: null
    ): CrossChainProxyChangedEventFilter;

    "Dispute(address,uint256,uint256,uint256)"(
      _arbitrator?: PromiseOrValue<string> | null,
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _metaEvidenceID?: null,
      _evidenceGroupID?: null
    ): DisputeEventFilter;
    Dispute(
      _arbitrator?: PromiseOrValue<string> | null,
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _metaEvidenceID?: null,
      _evidenceGroupID?: null
    ): DisputeEventFilter;

    "DurationsChanged(uint64,uint64,uint64)"(
      humanityLifespan?: null,
      renewalPeriodDuration?: null,
      challengePeriodDuration?: null
    ): DurationsChangedEventFilter;
    DurationsChanged(
      humanityLifespan?: null,
      renewalPeriodDuration?: null,
      challengePeriodDuration?: null
    ): DurationsChangedEventFilter;

    "Evidence(address,uint256,address,string)"(
      _arbitrator?: PromiseOrValue<string> | null,
      _evidenceGroupID?: PromiseOrValue<BigNumberish> | null,
      _party?: PromiseOrValue<string> | null,
      _evidence?: null
    ): EvidenceEventFilter;
    Evidence(
      _arbitrator?: PromiseOrValue<string> | null,
      _evidenceGroupID?: PromiseOrValue<BigNumberish> | null,
      _party?: PromiseOrValue<string> | null,
      _evidence?: null
    ): EvidenceEventFilter;

    "FeesAndRewardsWithdrawn(address,bytes20,uint256,uint256,uint256)"(
      beneficiary?: null,
      humanityId?: null,
      requestId?: null,
      challengeId?: null,
      round?: null
    ): FeesAndRewardsWithdrawnEventFilter;
    FeesAndRewardsWithdrawn(
      beneficiary?: null,
      humanityId?: null,
      requestId?: null,
      challengeId?: null,
      round?: null
    ): FeesAndRewardsWithdrawnEventFilter;

    "GovernorChanged(address)"(governor?: null): GovernorChangedEventFilter;
    GovernorChanged(governor?: null): GovernorChangedEventFilter;

    "HumanityClaim(address,bytes20,uint256,string,string)"(
      requester?: PromiseOrValue<string> | null,
      humanityId?: PromiseOrValue<BytesLike> | null,
      requestId?: null,
      evidence?: null,
      name?: null
    ): HumanityClaimEventFilter;
    HumanityClaim(
      requester?: PromiseOrValue<string> | null,
      humanityId?: PromiseOrValue<BytesLike> | null,
      requestId?: null,
      evidence?: null,
      name?: null
    ): HumanityClaimEventFilter;

    "HumanityGrantedManually(bytes20,address,uint64)"(
      humanityId?: PromiseOrValue<BytesLike> | null,
      owner?: PromiseOrValue<string> | null,
      expirationTime?: null
    ): HumanityGrantedManuallyEventFilter;
    HumanityGrantedManually(
      humanityId?: PromiseOrValue<BytesLike> | null,
      owner?: PromiseOrValue<string> | null,
      expirationTime?: null
    ): HumanityGrantedManuallyEventFilter;

    "HumanityRenewal(address,bytes20,uint256,string)"(
      requester?: PromiseOrValue<string> | null,
      humanityId?: PromiseOrValue<BytesLike> | null,
      requestId?: null,
      evidence?: null
    ): HumanityRenewalEventFilter;
    HumanityRenewal(
      requester?: PromiseOrValue<string> | null,
      humanityId?: PromiseOrValue<BytesLike> | null,
      requestId?: null,
      evidence?: null
    ): HumanityRenewalEventFilter;

    "HumanityRevocation(address,bytes20,uint256,string)"(
      requester?: PromiseOrValue<string> | null,
      humanityId?: PromiseOrValue<BytesLike> | null,
      requestId?: null,
      evidence?: null
    ): HumanityRevocationEventFilter;
    HumanityRevocation(
      requester?: PromiseOrValue<string> | null,
      humanityId?: PromiseOrValue<BytesLike> | null,
      requestId?: null,
      evidence?: null
    ): HumanityRevocationEventFilter;

    "HumanityRevokedManually(address)"(
      human?: PromiseOrValue<string> | null
    ): HumanityRevokedManuallyEventFilter;
    HumanityRevokedManually(
      human?: PromiseOrValue<string> | null
    ): HumanityRevokedManuallyEventFilter;

    "Initialized()"(): InitializedEventFilter;
    Initialized(): InitializedEventFilter;

    "MetaEvidence(uint256,string)"(
      _metaEvidenceID?: PromiseOrValue<BigNumberish> | null,
      _evidence?: null
    ): MetaEvidenceEventFilter;
    MetaEvidence(
      _metaEvidenceID?: PromiseOrValue<BigNumberish> | null,
      _evidence?: null
    ): MetaEvidenceEventFilter;

    "RequestBaseDepositChanged(uint256)"(
      requestBaseDeposit?: null
    ): RequestBaseDepositChangedEventFilter;
    RequestBaseDepositChanged(
      requestBaseDeposit?: null
    ): RequestBaseDepositChangedEventFilter;

    "RequestChallenged(bytes20,uint256,uint256,uint8,string)"(
      humanityId?: null,
      requestId?: null,
      challengeId?: null,
      reason?: null,
      evidence?: null
    ): RequestChallengedEventFilter;
    RequestChallenged(
      humanityId?: null,
      requestId?: null,
      challengeId?: null,
      reason?: null,
      evidence?: null
    ): RequestChallengedEventFilter;

    "RequestContribution(address)"(
      claimer?: null
    ): RequestContributionEventFilter;
    RequestContribution(claimer?: null): RequestContributionEventFilter;

    "RequestExecuted(bytes20,uint256)"(
      humanityId?: null,
      requestId?: null
    ): RequestExecutedEventFilter;
    RequestExecuted(
      humanityId?: null,
      requestId?: null
    ): RequestExecutedEventFilter;

    "RequestWithdrawn(bytes20,uint256)"(
      humanityId?: null,
      requestId?: null
    ): RequestWithdrawnEventFilter;
    RequestWithdrawn(
      humanityId?: null,
      requestId?: null
    ): RequestWithdrawnEventFilter;

    "RequiredNumberOfVouchesChanged(uint64)"(
      requiredNumberOfVouches?: null
    ): RequiredNumberOfVouchesChangedEventFilter;
    RequiredNumberOfVouchesChanged(
      requiredNumberOfVouches?: null
    ): RequiredNumberOfVouchesChangedEventFilter;

    "Ruling(address,uint256,uint256)"(
      _arbitrator?: PromiseOrValue<string> | null,
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _ruling?: null
    ): RulingEventFilter;
    Ruling(
      _arbitrator?: PromiseOrValue<string> | null,
      _disputeID?: PromiseOrValue<BigNumberish> | null,
      _ruling?: null
    ): RulingEventFilter;

    "StakeMultipliersChanged(uint256,uint256,uint256)"(
      sharedMultiplier?: null,
      winnerMultiplier?: null,
      loserMultiplier?: null
    ): StakeMultipliersChangedEventFilter;
    StakeMultipliersChanged(
      sharedMultiplier?: null,
      winnerMultiplier?: null,
      loserMultiplier?: null
    ): StakeMultipliersChangedEventFilter;

    "StateAdvanced(address)"(claimer?: null): StateAdvancedEventFilter;
    StateAdvanced(claimer?: null): StateAdvancedEventFilter;

    "VouchAdded(address,address,bytes20)"(
      voucher?: PromiseOrValue<string> | null,
      vouched?: PromiseOrValue<string> | null,
      humanityId?: null
    ): VouchAddedEventFilter;
    VouchAdded(
      voucher?: PromiseOrValue<string> | null,
      vouched?: PromiseOrValue<string> | null,
      humanityId?: null
    ): VouchAddedEventFilter;

    "VouchRemoved(address,address,bytes20)"(
      voucher?: PromiseOrValue<string> | null,
      vouched?: PromiseOrValue<string> | null,
      humanityId?: null
    ): VouchRemovedEventFilter;
    VouchRemoved(
      voucher?: PromiseOrValue<string> | null,
      vouched?: PromiseOrValue<string> | null,
      humanityId?: null
    ): VouchRemovedEventFilter;

    "VouchesProcessed(bytes20,uint256,uint256)"(
      humanityId?: null,
      requestId?: null,
      endIndex?: null
    ): VouchesProcessedEventFilter;
    VouchesProcessed(
      humanityId?: null,
      requestId?: null,
      endIndex?: null
    ): VouchesProcessedEventFilter;
  };

  estimateGas: {
    addVouch(
      _human: PromiseOrValue<string>,
      _humanityId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    advanceState(
      _claimer: PromiseOrValue<string>,
      _vouches: PromiseOrValue<string>[],
      _signatureVouches: ProofOfHumanity.SignatureVouchStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    arbitratorDataList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    challengePeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    challengeRequest(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _reason: PromiseOrValue<BigNumberish>,
      _evidence: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeArbitrator(
      _arbitrator: PromiseOrValue<string>,
      _arbitratorExtraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeCrossChainProofOfHumanity(
      _crossChainProofOfHumanity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeDurations(
      _humanityLifespan: PromiseOrValue<BigNumberish>,
      _renewalPeriodDuration: PromiseOrValue<BigNumberish>,
      _challengePeriodDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeGovernor(
      _governor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeMetaEvidence(
      _registrationMetaEvidence: PromiseOrValue<string>,
      _clearingMetaEvidence: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeRequestBaseDeposit(
      _requestBaseDeposit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeRequiredNumberOfVouches(
      _requiredNumberOfVouches: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeStakeMultipliers(
      _sharedStakeMultiplier: PromiseOrValue<BigNumberish>,
      _winnerStakeMultiplier: PromiseOrValue<BigNumberish>,
      _loserStakeMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "claimHumanity(bytes20,string,string)"(
      _humanityId: PromiseOrValue<BytesLike>,
      _evidence: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "claimHumanity(string,string)"(
      _evidence: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    crossChainProofOfHumanity(overrides?: CallOverrides): Promise<BigNumber>;

    disputeIdToData(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeRequest(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fundAppeal(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _challengeId: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fundRequest(
      _claimer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getArbitratorDataListCount(overrides?: CallOverrides): Promise<BigNumber>;

    getChallengeInfo(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _challengeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimerRequestId(
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContributions(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _challengeId: PromiseOrValue<BigNumberish>,
      _round: PromiseOrValue<BigNumberish>,
      _contributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHumanityInfo(
      _humanityId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfVouches(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestInfo(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoundInfo(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _challengeId: PromiseOrValue<BigNumberish>,
      _round: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    grantManually(
      _humanityId: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      _expirationTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    humanityLifespan(overrides?: CallOverrides): Promise<BigNumber>;

    humans(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _arbitrator: PromiseOrValue<string>,
      _arbitratorExtraData: PromiseOrValue<BytesLike>,
      _registrationMetaEvidence: PromiseOrValue<string>,
      _clearingMetaEvidence: PromiseOrValue<string>,
      _requestBaseDeposit: PromiseOrValue<BigNumberish>,
      _humanityLifespan: PromiseOrValue<BigNumberish>,
      _renewalPeriodDuration: PromiseOrValue<BigNumberish>,
      _challengePeriodDuration: PromiseOrValue<BigNumberish>,
      _multipliers: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _requiredNumberOfVouches: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    isClaimed(
      _humanityId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isHuman(
      _humanId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loserStakeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    processVouches(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _iterations: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeVouch(
      _human: PromiseOrValue<string>,
      _humanityId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renewHumanity(
      _evidence: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renewalPeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    requestBaseDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    requiredNumberOfVouches(overrides?: CallOverrides): Promise<BigNumber>;

    revokeHumanity(
      _humanityId: PromiseOrValue<BytesLike>,
      _evidence: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeManually(
      _humanId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rule(
      _disputeId: PromiseOrValue<BigNumberish>,
      _ruling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sharedStakeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    submitEvidence(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _evidence: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vouches(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    winnerStakeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeesAndRewards(
      _beneficiary: PromiseOrValue<string>,
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _challengeId: PromiseOrValue<BigNumberish>,
      _round: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawRequest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addVouch(
      _human: PromiseOrValue<string>,
      _humanityId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    advanceState(
      _claimer: PromiseOrValue<string>,
      _vouches: PromiseOrValue<string>[],
      _signatureVouches: ProofOfHumanity.SignatureVouchStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    arbitratorDataList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    challengePeriodDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    challengeRequest(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _reason: PromiseOrValue<BigNumberish>,
      _evidence: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeArbitrator(
      _arbitrator: PromiseOrValue<string>,
      _arbitratorExtraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeCrossChainProofOfHumanity(
      _crossChainProofOfHumanity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeDurations(
      _humanityLifespan: PromiseOrValue<BigNumberish>,
      _renewalPeriodDuration: PromiseOrValue<BigNumberish>,
      _challengePeriodDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeGovernor(
      _governor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeMetaEvidence(
      _registrationMetaEvidence: PromiseOrValue<string>,
      _clearingMetaEvidence: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeRequestBaseDeposit(
      _requestBaseDeposit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeRequiredNumberOfVouches(
      _requiredNumberOfVouches: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeStakeMultipliers(
      _sharedStakeMultiplier: PromiseOrValue<BigNumberish>,
      _winnerStakeMultiplier: PromiseOrValue<BigNumberish>,
      _loserStakeMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "claimHumanity(bytes20,string,string)"(
      _humanityId: PromiseOrValue<BytesLike>,
      _evidence: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "claimHumanity(string,string)"(
      _evidence: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    crossChainProofOfHumanity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disputeIdToData(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeRequest(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fundAppeal(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _challengeId: PromiseOrValue<BigNumberish>,
      _side: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fundRequest(
      _claimer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getArbitratorDataListCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChallengeInfo(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _challengeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimerRequestId(
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContributions(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _challengeId: PromiseOrValue<BigNumberish>,
      _round: PromiseOrValue<BigNumberish>,
      _contributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHumanityInfo(
      _humanityId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfVouches(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestInfo(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoundInfo(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _challengeId: PromiseOrValue<BigNumberish>,
      _round: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantManually(
      _humanityId: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      _expirationTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    humanityLifespan(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    humans(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _arbitrator: PromiseOrValue<string>,
      _arbitratorExtraData: PromiseOrValue<BytesLike>,
      _registrationMetaEvidence: PromiseOrValue<string>,
      _clearingMetaEvidence: PromiseOrValue<string>,
      _requestBaseDeposit: PromiseOrValue<BigNumberish>,
      _humanityLifespan: PromiseOrValue<BigNumberish>,
      _renewalPeriodDuration: PromiseOrValue<BigNumberish>,
      _challengePeriodDuration: PromiseOrValue<BigNumberish>,
      _multipliers: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _requiredNumberOfVouches: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isClaimed(
      _humanityId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isHuman(
      _humanId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loserStakeMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processVouches(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _iterations: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeVouch(
      _human: PromiseOrValue<string>,
      _humanityId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renewHumanity(
      _evidence: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renewalPeriodDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestBaseDeposit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requiredNumberOfVouches(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeHumanity(
      _humanityId: PromiseOrValue<BytesLike>,
      _evidence: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeManually(
      _humanId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rule(
      _disputeId: PromiseOrValue<BigNumberish>,
      _ruling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sharedStakeMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitEvidence(
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _evidence: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vouches(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    winnerStakeMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFeesAndRewards(
      _beneficiary: PromiseOrValue<string>,
      _humanityId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BigNumberish>,
      _challengeId: PromiseOrValue<BigNumberish>,
      _round: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRequest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
