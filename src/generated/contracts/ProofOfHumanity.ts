/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  AddressLike,
  BaseContract,
  BigNumberish,
  BytesLike,
  ContractMethod,
  ContractRunner,
  EventFragment,
  FunctionFragment,
  Interface,
  Listener,
  Result,
} from "ethers";
import type {
  TypedContractEvent,
  TypedContractMethod,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedLogDescription,
} from "./common";

export declare namespace ProofOfHumanity {
  export type SignatureVouchStruct = {
    expirationTime: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type SignatureVouchStructOutput = [
    expirationTime: bigint,
    v: bigint,
    r: string,
    s: string
  ] & { expirationTime: bigint; v: bigint; r: string; s: string };
}

export interface ProofOfHumanityInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addVouch"
      | "advanceState"
      | "arbitratorDataList"
      | "boundTo"
      | "challengePeriodDuration"
      | "challengeRequest"
      | "changeArbitrator"
      | "changeCrossChainProofOfHumanity"
      | "changeDurations"
      | "changeGovernor"
      | "changeMetaEvidence"
      | "changeRequestBaseDeposit"
      | "changeRequiredNumberOfVouches"
      | "changeStakeMultipliers"
      | "claimHumanity"
      | "claimHumanityDefault"
      | "crossChainProofOfHumanity"
      | "disputeIdToData"
      | "executeRequest"
      | "fundAppeal"
      | "fundRequest"
      | "getArbitratorDataListCount"
      | "getChallengeInfo"
      | "getClaimerRequestId"
      | "getContributions"
      | "getHumanityInfo"
      | "getNumberOfVouches"
      | "getRequestInfo"
      | "getRoundInfo"
      | "governor"
      | "grantManually"
      | "humanityLifespan"
      | "humanityOf"
      | "initialize"
      | "initialized"
      | "isClaimed"
      | "isHuman"
      | "loserStakeMultiplier"
      | "processVouches"
      | "removeVouch"
      | "renewHumanity"
      | "renewalPeriodDuration"
      | "requestBaseDeposit"
      | "requiredNumberOfVouches"
      | "revokeHumanity"
      | "revokeManually"
      | "rule"
      | "sharedStakeMultiplier"
      | "submitEvidence"
      | "vouches"
      | "winnerStakeMultiplier"
      | "withdrawFeesAndRewards"
      | "withdrawRequest"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AppealCreated"
      | "ArbitratorChanged"
      | "ChallengePeriodRestart"
      | "ClaimRequest"
      | "Contribution"
      | "CrossChainProxyChanged"
      | "Dispute"
      | "DurationsChanged"
      | "Evidence"
      | "FeesAndRewardsWithdrawn"
      | "GovernorChanged"
      | "HumanityClaimed"
      | "HumanityGrantedManually"
      | "HumanityRevoked"
      | "HumanityRevokedManually"
      | "Initialized"
      | "MetaEvidence"
      | "RenewalRequest"
      | "RequestBaseDepositChanged"
      | "RequestChallenged"
      | "RequestWithdrawn"
      | "RequiredNumberOfVouchesChanged"
      | "RevocationRequest"
      | "Ruling"
      | "StakeMultipliersChanged"
      | "StateAdvanced"
      | "VouchAdded"
      | "VouchRegistered"
      | "VouchRemoved"
      | "VouchesProcessed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addVouch",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "advanceState",
    values: [AddressLike, AddressLike[], ProofOfHumanity.SignatureVouchStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitratorDataList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "boundTo", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "challengePeriodDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challengeRequest",
    values: [BytesLike, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeArbitrator",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeCrossChainProofOfHumanity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeDurations",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeGovernor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMetaEvidence",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRequestBaseDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRequiredNumberOfVouches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeStakeMultipliers",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimHumanity",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimHumanityDefault",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "crossChainProofOfHumanity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputeIdToData",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRequest",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundAppeal",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundRequest",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getArbitratorDataListCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChallengeInfo",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimerRequestId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContributions",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getHumanityInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfVouches",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestInfo",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundInfo",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grantManually",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "humanityLifespan",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "humanityOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      BytesLike,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isHuman",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "loserStakeMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processVouches",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVouch",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renewHumanity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renewalPeriodDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestBaseDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredNumberOfVouches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeHumanity",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeManually",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rule",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sharedStakeMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitEvidence",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "vouches",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "winnerStakeMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeesAndRewards",
    values: [AddressLike, BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRequest",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addVouch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "advanceState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arbitratorDataList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "boundTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "challengePeriodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeArbitrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeCrossChainProofOfHumanity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeDurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMetaEvidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRequestBaseDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRequiredNumberOfVouches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeStakeMultipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimHumanity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimHumanityDefault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crossChainProofOfHumanity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeIdToData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundAppeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArbitratorDataListCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChallengeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimerRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHumanityInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfVouches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantManually",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "humanityLifespan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "humanityOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isHuman", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "loserStakeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processVouches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVouch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewHumanity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewalPeriodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestBaseDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredNumberOfVouches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeHumanity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeManually",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sharedStakeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitEvidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vouches", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "winnerStakeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeesAndRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRequest",
    data: BytesLike
  ): Result;
}

export namespace AppealCreatedEvent {
  export type InputTuple = [arbitrator: AddressLike, disputeId: BigNumberish];
  export type OutputTuple = [arbitrator: string, disputeId: bigint];
  export interface OutputObject {
    arbitrator: string;
    disputeId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ArbitratorChangedEvent {
  export type InputTuple = [
    arbitrator: AddressLike,
    arbitratorExtraData: BytesLike
  ];
  export type OutputTuple = [arbitrator: string, arbitratorExtraData: string];
  export interface OutputObject {
    arbitrator: string;
    arbitratorExtraData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChallengePeriodRestartEvent {
  export type InputTuple = [
    humanityId: BytesLike,
    requestId: BigNumberish,
    challengeId: BigNumberish
  ];
  export type OutputTuple = [
    humanityId: string,
    requestId: bigint,
    challengeId: bigint
  ];
  export interface OutputObject {
    humanityId: string;
    requestId: bigint;
    challengeId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimRequestEvent {
  export type InputTuple = [
    requester: AddressLike,
    humanityId: BytesLike,
    requestId: BigNumberish,
    evidence: string,
    name: string
  ];
  export type OutputTuple = [
    requester: string,
    humanityId: string,
    requestId: bigint,
    evidence: string,
    name: string
  ];
  export interface OutputObject {
    requester: string;
    humanityId: string;
    requestId: bigint;
    evidence: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContributionEvent {
  export type InputTuple = [
    humanityId: BytesLike,
    requestId: BigNumberish,
    challengeId: BigNumberish,
    round: BigNumberish,
    contributor: AddressLike,
    contribution: BigNumberish,
    side: BigNumberish
  ];
  export type OutputTuple = [
    humanityId: string,
    requestId: bigint,
    challengeId: bigint,
    round: bigint,
    contributor: string,
    contribution: bigint,
    side: bigint
  ];
  export interface OutputObject {
    humanityId: string;
    requestId: bigint;
    challengeId: bigint;
    round: bigint;
    contributor: string;
    contribution: bigint;
    side: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrossChainProxyChangedEvent {
  export type InputTuple = [crossChainProofOfHumanity: AddressLike];
  export type OutputTuple = [crossChainProofOfHumanity: string];
  export interface OutputObject {
    crossChainProofOfHumanity: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeEvent {
  export type InputTuple = [
    _arbitrator: AddressLike,
    _disputeID: BigNumberish,
    _metaEvidenceID: BigNumberish,
    _evidenceGroupID: BigNumberish
  ];
  export type OutputTuple = [
    _arbitrator: string,
    _disputeID: bigint,
    _metaEvidenceID: bigint,
    _evidenceGroupID: bigint
  ];
  export interface OutputObject {
    _arbitrator: string;
    _disputeID: bigint;
    _metaEvidenceID: bigint;
    _evidenceGroupID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DurationsChangedEvent {
  export type InputTuple = [
    humanityLifespan: BigNumberish,
    renewalPeriodDuration: BigNumberish,
    challengePeriodDuration: BigNumberish
  ];
  export type OutputTuple = [
    humanityLifespan: bigint,
    renewalPeriodDuration: bigint,
    challengePeriodDuration: bigint
  ];
  export interface OutputObject {
    humanityLifespan: bigint;
    renewalPeriodDuration: bigint;
    challengePeriodDuration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EvidenceEvent {
  export type InputTuple = [
    _arbitrator: AddressLike,
    _evidenceGroupID: BigNumberish,
    _party: AddressLike,
    _evidence: string
  ];
  export type OutputTuple = [
    _arbitrator: string,
    _evidenceGroupID: bigint,
    _party: string,
    _evidence: string
  ];
  export interface OutputObject {
    _arbitrator: string;
    _evidenceGroupID: bigint;
    _party: string;
    _evidence: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesAndRewardsWithdrawnEvent {
  export type InputTuple = [
    humanityId: BytesLike,
    requestId: BigNumberish,
    challengeId: BigNumberish,
    round: BigNumberish,
    beneficiary: AddressLike
  ];
  export type OutputTuple = [
    humanityId: string,
    requestId: bigint,
    challengeId: bigint,
    round: bigint,
    beneficiary: string
  ];
  export interface OutputObject {
    humanityId: string;
    requestId: bigint;
    challengeId: bigint;
    round: bigint;
    beneficiary: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernorChangedEvent {
  export type InputTuple = [governor: AddressLike];
  export type OutputTuple = [governor: string];
  export interface OutputObject {
    governor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HumanityClaimedEvent {
  export type InputTuple = [humanityId: BytesLike, requestId: BigNumberish];
  export type OutputTuple = [humanityId: string, requestId: bigint];
  export interface OutputObject {
    humanityId: string;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HumanityGrantedManuallyEvent {
  export type InputTuple = [
    humanityId: BytesLike,
    owner: AddressLike,
    expirationTime: BigNumberish
  ];
  export type OutputTuple = [
    humanityId: string,
    owner: string,
    expirationTime: bigint
  ];
  export interface OutputObject {
    humanityId: string;
    owner: string;
    expirationTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HumanityRevokedEvent {
  export type InputTuple = [humanityId: BytesLike, requestId: BigNumberish];
  export type OutputTuple = [humanityId: string, requestId: bigint];
  export interface OutputObject {
    humanityId: string;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HumanityRevokedManuallyEvent {
  export type InputTuple = [humanityId: BytesLike];
  export type OutputTuple = [humanityId: string];
  export interface OutputObject {
    humanityId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetaEvidenceEvent {
  export type InputTuple = [_metaEvidenceID: BigNumberish, _evidence: string];
  export type OutputTuple = [_metaEvidenceID: bigint, _evidence: string];
  export interface OutputObject {
    _metaEvidenceID: bigint;
    _evidence: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RenewalRequestEvent {
  export type InputTuple = [
    requester: AddressLike,
    humanityId: BytesLike,
    requestId: BigNumberish,
    evidence: string
  ];
  export type OutputTuple = [
    requester: string,
    humanityId: string,
    requestId: bigint,
    evidence: string
  ];
  export interface OutputObject {
    requester: string;
    humanityId: string;
    requestId: bigint;
    evidence: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestBaseDepositChangedEvent {
  export type InputTuple = [requestBaseDeposit: BigNumberish];
  export type OutputTuple = [requestBaseDeposit: bigint];
  export interface OutputObject {
    requestBaseDeposit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestChallengedEvent {
  export type InputTuple = [
    humanityId: BytesLike,
    requestId: BigNumberish,
    challengeId: BigNumberish,
    reason: BigNumberish,
    disputeId: BigNumberish,
    evidence: string
  ];
  export type OutputTuple = [
    humanityId: string,
    requestId: bigint,
    challengeId: bigint,
    reason: bigint,
    disputeId: bigint,
    evidence: string
  ];
  export interface OutputObject {
    humanityId: string;
    requestId: bigint;
    challengeId: bigint;
    reason: bigint;
    disputeId: bigint;
    evidence: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestWithdrawnEvent {
  export type InputTuple = [humanityId: BytesLike, requestId: BigNumberish];
  export type OutputTuple = [humanityId: string, requestId: bigint];
  export interface OutputObject {
    humanityId: string;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequiredNumberOfVouchesChangedEvent {
  export type InputTuple = [requiredNumberOfVouches: BigNumberish];
  export type OutputTuple = [requiredNumberOfVouches: bigint];
  export interface OutputObject {
    requiredNumberOfVouches: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevocationRequestEvent {
  export type InputTuple = [
    requester: AddressLike,
    humanityId: BytesLike,
    requestId: BigNumberish,
    evidence: string
  ];
  export type OutputTuple = [
    requester: string,
    humanityId: string,
    requestId: bigint,
    evidence: string
  ];
  export interface OutputObject {
    requester: string;
    humanityId: string;
    requestId: bigint;
    evidence: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RulingEvent {
  export type InputTuple = [
    _arbitrator: AddressLike,
    _disputeID: BigNumberish,
    _ruling: BigNumberish
  ];
  export type OutputTuple = [
    _arbitrator: string,
    _disputeID: bigint,
    _ruling: bigint
  ];
  export interface OutputObject {
    _arbitrator: string;
    _disputeID: bigint;
    _ruling: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeMultipliersChangedEvent {
  export type InputTuple = [
    sharedMultiplier: BigNumberish,
    winnerMultiplier: BigNumberish,
    loserMultiplier: BigNumberish
  ];
  export type OutputTuple = [
    sharedMultiplier: bigint,
    winnerMultiplier: bigint,
    loserMultiplier: bigint
  ];
  export interface OutputObject {
    sharedMultiplier: bigint;
    winnerMultiplier: bigint;
    loserMultiplier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StateAdvancedEvent {
  export type InputTuple = [claimer: AddressLike];
  export type OutputTuple = [claimer: string];
  export interface OutputObject {
    claimer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VouchAddedEvent {
  export type InputTuple = [
    voucherAccount: AddressLike,
    claimer: AddressLike,
    humanityId: BytesLike
  ];
  export type OutputTuple = [
    voucherAccount: string,
    claimer: string,
    humanityId: string
  ];
  export interface OutputObject {
    voucherAccount: string;
    claimer: string;
    humanityId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VouchRegisteredEvent {
  export type InputTuple = [
    voucherHumanityId: BytesLike,
    vouchedHumanityId: BytesLike,
    requestId: BigNumberish
  ];
  export type OutputTuple = [
    voucherHumanityId: string,
    vouchedHumanityId: string,
    requestId: bigint
  ];
  export interface OutputObject {
    voucherHumanityId: string;
    vouchedHumanityId: string;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VouchRemovedEvent {
  export type InputTuple = [
    voucherAccount: AddressLike,
    claimer: AddressLike,
    humanityId: BytesLike
  ];
  export type OutputTuple = [
    voucherAccount: string,
    claimer: string,
    humanityId: string
  ];
  export interface OutputObject {
    voucherAccount: string;
    claimer: string;
    humanityId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VouchesProcessedEvent {
  export type InputTuple = [
    humanityId: BytesLike,
    requestId: BigNumberish,
    endIndex: BigNumberish
  ];
  export type OutputTuple = [
    humanityId: string,
    requestId: bigint,
    endIndex: bigint
  ];
  export interface OutputObject {
    humanityId: string;
    requestId: bigint;
    endIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ProofOfHumanity extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: ProofOfHumanityInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addVouch: TypedContractMethod<
    [_account: AddressLike, _humanityId: BytesLike],
    [void],
    "nonpayable"
  >;

  advanceState: TypedContractMethod<
    [
      _claimer: AddressLike,
      _vouches: AddressLike[],
      _signatureVouches: ProofOfHumanity.SignatureVouchStruct[]
    ],
    [void],
    "nonpayable"
  >;

  arbitratorDataList: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string] & {
        metaEvidenceUpdates: bigint;
        arbitrator: string;
        arbitratorExtraData: string;
      }
    ],
    "view"
  >;

  boundTo: TypedContractMethod<[_humanityId: BytesLike], [string], "view">;

  challengePeriodDuration: TypedContractMethod<[], [bigint], "view">;

  challengeRequest: TypedContractMethod<
    [
      _humanityId: BytesLike,
      _requestId: BigNumberish,
      _reason: BigNumberish,
      _evidence: string
    ],
    [void],
    "payable"
  >;

  changeArbitrator: TypedContractMethod<
    [_arbitrator: AddressLike, _arbitratorExtraData: BytesLike],
    [void],
    "nonpayable"
  >;

  changeCrossChainProofOfHumanity: TypedContractMethod<
    [_crossChainProofOfHumanity: AddressLike],
    [void],
    "nonpayable"
  >;

  changeDurations: TypedContractMethod<
    [
      _humanityLifespan: BigNumberish,
      _renewalPeriodDuration: BigNumberish,
      _challengePeriodDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  changeGovernor: TypedContractMethod<
    [_governor: AddressLike],
    [void],
    "nonpayable"
  >;

  changeMetaEvidence: TypedContractMethod<
    [_registrationMetaEvidence: string, _clearingMetaEvidence: string],
    [void],
    "nonpayable"
  >;

  changeRequestBaseDeposit: TypedContractMethod<
    [_requestBaseDeposit: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeRequiredNumberOfVouches: TypedContractMethod<
    [_requiredNumberOfVouches: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeStakeMultipliers: TypedContractMethod<
    [
      _sharedStakeMultiplier: BigNumberish,
      _winnerStakeMultiplier: BigNumberish,
      _loserStakeMultiplier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  claimHumanity: TypedContractMethod<
    [_humanityId: BytesLike, _evidence: string, _name: string],
    [void],
    "payable"
  >;

  claimHumanityDefault: TypedContractMethod<
    [_evidence: string, _name: string],
    [void],
    "payable"
  >;

  crossChainProofOfHumanity: TypedContractMethod<[], [string], "view">;

  disputeIdToData: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, string] & {
        requestId: bigint;
        challengeId: bigint;
        humanityId: string;
      }
    ],
    "view"
  >;

  executeRequest: TypedContractMethod<
    [_humanityId: BytesLike, _requestId: BigNumberish],
    [void],
    "nonpayable"
  >;

  fundAppeal: TypedContractMethod<
    [
      _humanityId: BytesLike,
      _requestId: BigNumberish,
      _challengeId: BigNumberish,
      _side: BigNumberish
    ],
    [void],
    "payable"
  >;

  fundRequest: TypedContractMethod<
    [_humanityId: BytesLike, _requestId: BigNumberish],
    [void],
    "payable"
  >;

  getArbitratorDataListCount: TypedContractMethod<[], [bigint], "view">;

  getChallengeInfo: TypedContractMethod<
    [
      _humanityId: BytesLike,
      _requestId: BigNumberish,
      _challengeId: BigNumberish
    ],
    [
      [bigint, string, bigint, bigint] & {
        lastRoundId: bigint;
        challenger: string;
        disputeId: bigint;
        ruling: bigint;
      }
    ],
    "view"
  >;

  getClaimerRequestId: TypedContractMethod<
    [_claimer: AddressLike],
    [bigint],
    "view"
  >;

  getContributions: TypedContractMethod<
    [
      _humanityId: BytesLike,
      _requestId: BigNumberish,
      _challengeId: BigNumberish,
      _round: BigNumberish,
      _contributor: AddressLike
    ],
    [[bigint, bigint] & { forRequester: bigint; forChallenger: bigint }],
    "view"
  >;

  getHumanityInfo: TypedContractMethod<
    [_humanityId: BytesLike],
    [
      [boolean, boolean, bigint, bigint, string, bigint] & {
        vouching: boolean;
        pendingRevocation: boolean;
        nbPendingRequests: bigint;
        expirationTime: bigint;
        owner: string;
        nbRequests: bigint;
      }
    ],
    "view"
  >;

  getNumberOfVouches: TypedContractMethod<
    [_humanityId: BytesLike, _requestId: BigNumberish],
    [bigint],
    "view"
  >;

  getRequestInfo: TypedContractMethod<
    [_humanityId: BytesLike, _requestId: BigNumberish],
    [
      [
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint
      ] & {
        punishedVouch: boolean;
        usedReasons: bigint;
        arbitratorDataId: bigint;
        lastChallengeId: bigint;
        challengePeriodStart: bigint;
        requester: string;
        ultimateChallenger: string;
        status: bigint;
        currentReason: bigint;
      }
    ],
    "view"
  >;

  getRoundInfo: TypedContractMethod<
    [
      _humanityId: BytesLike,
      _requestId: BigNumberish,
      _challengeId: BigNumberish,
      _round: BigNumberish
    ],
    [
      [boolean, bigint, bigint, bigint, bigint] & {
        appealed: boolean;
        paidFeesRequester: bigint;
        paidFeesChallenger: bigint;
        sideFunded: bigint;
        feeRewards: bigint;
      }
    ],
    "view"
  >;

  governor: TypedContractMethod<[], [string], "view">;

  grantManually: TypedContractMethod<
    [
      _humanityId: BytesLike,
      _account: AddressLike,
      _expirationTime: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  humanityLifespan: TypedContractMethod<[], [bigint], "view">;

  humanityOf: TypedContractMethod<[_account: AddressLike], [string], "view">;

  initialize: TypedContractMethod<
    [
      _arbitrator: AddressLike,
      _arbitratorExtraData: BytesLike,
      _registrationMetaEvidence: string,
      _clearingMetaEvidence: string,
      _requestBaseDeposit: BigNumberish,
      _humanityLifespan: BigNumberish,
      _renewalPeriodDuration: BigNumberish,
      _challengePeriodDuration: BigNumberish,
      _multipliers: [BigNumberish, BigNumberish, BigNumberish],
      _requiredNumberOfVouches: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  initialized: TypedContractMethod<[], [boolean], "view">;

  isClaimed: TypedContractMethod<[_humanityId: BytesLike], [boolean], "view">;

  isHuman: TypedContractMethod<[_account: AddressLike], [boolean], "view">;

  loserStakeMultiplier: TypedContractMethod<[], [bigint], "view">;

  processVouches: TypedContractMethod<
    [
      _humanityId: BytesLike,
      _requestId: BigNumberish,
      _iterations: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  removeVouch: TypedContractMethod<
    [_account: AddressLike, _humanityId: BytesLike],
    [void],
    "nonpayable"
  >;

  renewHumanity: TypedContractMethod<[_evidence: string], [void], "payable">;

  renewalPeriodDuration: TypedContractMethod<[], [bigint], "view">;

  requestBaseDeposit: TypedContractMethod<[], [bigint], "view">;

  requiredNumberOfVouches: TypedContractMethod<[], [bigint], "view">;

  revokeHumanity: TypedContractMethod<
    [_humanityId: BytesLike, _evidence: string],
    [void],
    "payable"
  >;

  revokeManually: TypedContractMethod<
    [_account: AddressLike],
    [[bigint, string] & { expirationTime: bigint; humanityId: string }],
    "nonpayable"
  >;

  rule: TypedContractMethod<
    [_disputeId: BigNumberish, _ruling: BigNumberish],
    [void],
    "nonpayable"
  >;

  sharedStakeMultiplier: TypedContractMethod<[], [bigint], "view">;

  submitEvidence: TypedContractMethod<
    [_humanityId: BytesLike, _requestId: BigNumberish, _evidence: string],
    [void],
    "nonpayable"
  >;

  vouches: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BytesLike],
    [boolean],
    "view"
  >;

  winnerStakeMultiplier: TypedContractMethod<[], [bigint], "view">;

  withdrawFeesAndRewards: TypedContractMethod<
    [
      _beneficiary: AddressLike,
      _humanityId: BytesLike,
      _requestId: BigNumberish,
      _challengeId: BigNumberish,
      _round: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdrawRequest: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addVouch"
  ): TypedContractMethod<
    [_account: AddressLike, _humanityId: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "advanceState"
  ): TypedContractMethod<
    [
      _claimer: AddressLike,
      _vouches: AddressLike[],
      _signatureVouches: ProofOfHumanity.SignatureVouchStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(nameOrSignature: "arbitratorDataList"): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string] & {
        metaEvidenceUpdates: bigint;
        arbitrator: string;
        arbitratorExtraData: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "boundTo"
  ): TypedContractMethod<[_humanityId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "challengePeriodDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "challengeRequest"
  ): TypedContractMethod<
    [
      _humanityId: BytesLike,
      _requestId: BigNumberish,
      _reason: BigNumberish,
      _evidence: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "changeArbitrator"
  ): TypedContractMethod<
    [_arbitrator: AddressLike, _arbitratorExtraData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeCrossChainProofOfHumanity"
  ): TypedContractMethod<
    [_crossChainProofOfHumanity: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeDurations"
  ): TypedContractMethod<
    [
      _humanityLifespan: BigNumberish,
      _renewalPeriodDuration: BigNumberish,
      _challengePeriodDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeGovernor"
  ): TypedContractMethod<[_governor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeMetaEvidence"
  ): TypedContractMethod<
    [_registrationMetaEvidence: string, _clearingMetaEvidence: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeRequestBaseDeposit"
  ): TypedContractMethod<
    [_requestBaseDeposit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeRequiredNumberOfVouches"
  ): TypedContractMethod<
    [_requiredNumberOfVouches: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeStakeMultipliers"
  ): TypedContractMethod<
    [
      _sharedStakeMultiplier: BigNumberish,
      _winnerStakeMultiplier: BigNumberish,
      _loserStakeMultiplier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimHumanity"
  ): TypedContractMethod<
    [_humanityId: BytesLike, _evidence: string, _name: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "claimHumanityDefault"
  ): TypedContractMethod<[_evidence: string, _name: string], [void], "payable">;
  getFunction(
    nameOrSignature: "crossChainProofOfHumanity"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "disputeIdToData"): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, string] & {
        requestId: bigint;
        challengeId: bigint;
        humanityId: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeRequest"
  ): TypedContractMethod<
    [_humanityId: BytesLike, _requestId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fundAppeal"
  ): TypedContractMethod<
    [
      _humanityId: BytesLike,
      _requestId: BigNumberish,
      _challengeId: BigNumberish,
      _side: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "fundRequest"
  ): TypedContractMethod<
    [_humanityId: BytesLike, _requestId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getArbitratorDataListCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "getChallengeInfo"): TypedContractMethod<
    [
      _humanityId: BytesLike,
      _requestId: BigNumberish,
      _challengeId: BigNumberish
    ],
    [
      [bigint, string, bigint, bigint] & {
        lastRoundId: bigint;
        challenger: string;
        disputeId: bigint;
        ruling: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClaimerRequestId"
  ): TypedContractMethod<[_claimer: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getContributions"
  ): TypedContractMethod<
    [
      _humanityId: BytesLike,
      _requestId: BigNumberish,
      _challengeId: BigNumberish,
      _round: BigNumberish,
      _contributor: AddressLike
    ],
    [[bigint, bigint] & { forRequester: bigint; forChallenger: bigint }],
    "view"
  >;
  getFunction(nameOrSignature: "getHumanityInfo"): TypedContractMethod<
    [_humanityId: BytesLike],
    [
      [boolean, boolean, bigint, bigint, string, bigint] & {
        vouching: boolean;
        pendingRevocation: boolean;
        nbPendingRequests: bigint;
        expirationTime: bigint;
        owner: string;
        nbRequests: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNumberOfVouches"
  ): TypedContractMethod<
    [_humanityId: BytesLike, _requestId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(nameOrSignature: "getRequestInfo"): TypedContractMethod<
    [_humanityId: BytesLike, _requestId: BigNumberish],
    [
      [
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint
      ] & {
        punishedVouch: boolean;
        usedReasons: bigint;
        arbitratorDataId: bigint;
        lastChallengeId: bigint;
        challengePeriodStart: bigint;
        requester: string;
        ultimateChallenger: string;
        status: bigint;
        currentReason: bigint;
      }
    ],
    "view"
  >;
  getFunction(nameOrSignature: "getRoundInfo"): TypedContractMethod<
    [
      _humanityId: BytesLike,
      _requestId: BigNumberish,
      _challengeId: BigNumberish,
      _round: BigNumberish
    ],
    [
      [boolean, bigint, bigint, bigint, bigint] & {
        appealed: boolean;
        paidFeesRequester: bigint;
        paidFeesChallenger: bigint;
        sideFunded: bigint;
        feeRewards: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "governor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "grantManually"
  ): TypedContractMethod<
    [
      _humanityId: BytesLike,
      _account: AddressLike,
      _expirationTime: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "humanityLifespan"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "humanityOf"
  ): TypedContractMethod<[_account: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _arbitrator: AddressLike,
      _arbitratorExtraData: BytesLike,
      _registrationMetaEvidence: string,
      _clearingMetaEvidence: string,
      _requestBaseDeposit: BigNumberish,
      _humanityLifespan: BigNumberish,
      _renewalPeriodDuration: BigNumberish,
      _challengePeriodDuration: BigNumberish,
      _multipliers: [BigNumberish, BigNumberish, BigNumberish],
      _requiredNumberOfVouches: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isClaimed"
  ): TypedContractMethod<[_humanityId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isHuman"
  ): TypedContractMethod<[_account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "loserStakeMultiplier"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "processVouches"
  ): TypedContractMethod<
    [
      _humanityId: BytesLike,
      _requestId: BigNumberish,
      _iterations: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeVouch"
  ): TypedContractMethod<
    [_account: AddressLike, _humanityId: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renewHumanity"
  ): TypedContractMethod<[_evidence: string], [void], "payable">;
  getFunction(
    nameOrSignature: "renewalPeriodDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestBaseDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requiredNumberOfVouches"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "revokeHumanity"
  ): TypedContractMethod<
    [_humanityId: BytesLike, _evidence: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "revokeManually"
  ): TypedContractMethod<
    [_account: AddressLike],
    [[bigint, string] & { expirationTime: bigint; humanityId: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rule"
  ): TypedContractMethod<
    [_disputeId: BigNumberish, _ruling: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sharedStakeMultiplier"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "submitEvidence"
  ): TypedContractMethod<
    [_humanityId: BytesLike, _requestId: BigNumberish, _evidence: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vouches"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "winnerStakeMultiplier"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawFeesAndRewards"
  ): TypedContractMethod<
    [
      _beneficiary: AddressLike,
      _humanityId: BytesLike,
      _requestId: BigNumberish,
      _challengeId: BigNumberish,
      _round: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawRequest"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AppealCreated"
  ): TypedContractEvent<
    AppealCreatedEvent.InputTuple,
    AppealCreatedEvent.OutputTuple,
    AppealCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ArbitratorChanged"
  ): TypedContractEvent<
    ArbitratorChangedEvent.InputTuple,
    ArbitratorChangedEvent.OutputTuple,
    ArbitratorChangedEvent.OutputObject
  >;
  getEvent(
    key: "ChallengePeriodRestart"
  ): TypedContractEvent<
    ChallengePeriodRestartEvent.InputTuple,
    ChallengePeriodRestartEvent.OutputTuple,
    ChallengePeriodRestartEvent.OutputObject
  >;
  getEvent(
    key: "ClaimRequest"
  ): TypedContractEvent<
    ClaimRequestEvent.InputTuple,
    ClaimRequestEvent.OutputTuple,
    ClaimRequestEvent.OutputObject
  >;
  getEvent(
    key: "Contribution"
  ): TypedContractEvent<
    ContributionEvent.InputTuple,
    ContributionEvent.OutputTuple,
    ContributionEvent.OutputObject
  >;
  getEvent(
    key: "CrossChainProxyChanged"
  ): TypedContractEvent<
    CrossChainProxyChangedEvent.InputTuple,
    CrossChainProxyChangedEvent.OutputTuple,
    CrossChainProxyChangedEvent.OutputObject
  >;
  getEvent(
    key: "Dispute"
  ): TypedContractEvent<
    DisputeEvent.InputTuple,
    DisputeEvent.OutputTuple,
    DisputeEvent.OutputObject
  >;
  getEvent(
    key: "DurationsChanged"
  ): TypedContractEvent<
    DurationsChangedEvent.InputTuple,
    DurationsChangedEvent.OutputTuple,
    DurationsChangedEvent.OutputObject
  >;
  getEvent(
    key: "Evidence"
  ): TypedContractEvent<
    EvidenceEvent.InputTuple,
    EvidenceEvent.OutputTuple,
    EvidenceEvent.OutputObject
  >;
  getEvent(
    key: "FeesAndRewardsWithdrawn"
  ): TypedContractEvent<
    FeesAndRewardsWithdrawnEvent.InputTuple,
    FeesAndRewardsWithdrawnEvent.OutputTuple,
    FeesAndRewardsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "GovernorChanged"
  ): TypedContractEvent<
    GovernorChangedEvent.InputTuple,
    GovernorChangedEvent.OutputTuple,
    GovernorChangedEvent.OutputObject
  >;
  getEvent(
    key: "HumanityClaimed"
  ): TypedContractEvent<
    HumanityClaimedEvent.InputTuple,
    HumanityClaimedEvent.OutputTuple,
    HumanityClaimedEvent.OutputObject
  >;
  getEvent(
    key: "HumanityGrantedManually"
  ): TypedContractEvent<
    HumanityGrantedManuallyEvent.InputTuple,
    HumanityGrantedManuallyEvent.OutputTuple,
    HumanityGrantedManuallyEvent.OutputObject
  >;
  getEvent(
    key: "HumanityRevoked"
  ): TypedContractEvent<
    HumanityRevokedEvent.InputTuple,
    HumanityRevokedEvent.OutputTuple,
    HumanityRevokedEvent.OutputObject
  >;
  getEvent(
    key: "HumanityRevokedManually"
  ): TypedContractEvent<
    HumanityRevokedManuallyEvent.InputTuple,
    HumanityRevokedManuallyEvent.OutputTuple,
    HumanityRevokedManuallyEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MetaEvidence"
  ): TypedContractEvent<
    MetaEvidenceEvent.InputTuple,
    MetaEvidenceEvent.OutputTuple,
    MetaEvidenceEvent.OutputObject
  >;
  getEvent(
    key: "RenewalRequest"
  ): TypedContractEvent<
    RenewalRequestEvent.InputTuple,
    RenewalRequestEvent.OutputTuple,
    RenewalRequestEvent.OutputObject
  >;
  getEvent(
    key: "RequestBaseDepositChanged"
  ): TypedContractEvent<
    RequestBaseDepositChangedEvent.InputTuple,
    RequestBaseDepositChangedEvent.OutputTuple,
    RequestBaseDepositChangedEvent.OutputObject
  >;
  getEvent(
    key: "RequestChallenged"
  ): TypedContractEvent<
    RequestChallengedEvent.InputTuple,
    RequestChallengedEvent.OutputTuple,
    RequestChallengedEvent.OutputObject
  >;
  getEvent(
    key: "RequestWithdrawn"
  ): TypedContractEvent<
    RequestWithdrawnEvent.InputTuple,
    RequestWithdrawnEvent.OutputTuple,
    RequestWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "RequiredNumberOfVouchesChanged"
  ): TypedContractEvent<
    RequiredNumberOfVouchesChangedEvent.InputTuple,
    RequiredNumberOfVouchesChangedEvent.OutputTuple,
    RequiredNumberOfVouchesChangedEvent.OutputObject
  >;
  getEvent(
    key: "RevocationRequest"
  ): TypedContractEvent<
    RevocationRequestEvent.InputTuple,
    RevocationRequestEvent.OutputTuple,
    RevocationRequestEvent.OutputObject
  >;
  getEvent(
    key: "Ruling"
  ): TypedContractEvent<
    RulingEvent.InputTuple,
    RulingEvent.OutputTuple,
    RulingEvent.OutputObject
  >;
  getEvent(
    key: "StakeMultipliersChanged"
  ): TypedContractEvent<
    StakeMultipliersChangedEvent.InputTuple,
    StakeMultipliersChangedEvent.OutputTuple,
    StakeMultipliersChangedEvent.OutputObject
  >;
  getEvent(
    key: "StateAdvanced"
  ): TypedContractEvent<
    StateAdvancedEvent.InputTuple,
    StateAdvancedEvent.OutputTuple,
    StateAdvancedEvent.OutputObject
  >;
  getEvent(
    key: "VouchAdded"
  ): TypedContractEvent<
    VouchAddedEvent.InputTuple,
    VouchAddedEvent.OutputTuple,
    VouchAddedEvent.OutputObject
  >;
  getEvent(
    key: "VouchRegistered"
  ): TypedContractEvent<
    VouchRegisteredEvent.InputTuple,
    VouchRegisteredEvent.OutputTuple,
    VouchRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "VouchRemoved"
  ): TypedContractEvent<
    VouchRemovedEvent.InputTuple,
    VouchRemovedEvent.OutputTuple,
    VouchRemovedEvent.OutputObject
  >;
  getEvent(
    key: "VouchesProcessed"
  ): TypedContractEvent<
    VouchesProcessedEvent.InputTuple,
    VouchesProcessedEvent.OutputTuple,
    VouchesProcessedEvent.OutputObject
  >;

  filters: {
    "AppealCreated(address,uint256)": TypedContractEvent<
      AppealCreatedEvent.InputTuple,
      AppealCreatedEvent.OutputTuple,
      AppealCreatedEvent.OutputObject
    >;
    AppealCreated: TypedContractEvent<
      AppealCreatedEvent.InputTuple,
      AppealCreatedEvent.OutputTuple,
      AppealCreatedEvent.OutputObject
    >;

    "ArbitratorChanged(address,bytes)": TypedContractEvent<
      ArbitratorChangedEvent.InputTuple,
      ArbitratorChangedEvent.OutputTuple,
      ArbitratorChangedEvent.OutputObject
    >;
    ArbitratorChanged: TypedContractEvent<
      ArbitratorChangedEvent.InputTuple,
      ArbitratorChangedEvent.OutputTuple,
      ArbitratorChangedEvent.OutputObject
    >;

    "ChallengePeriodRestart(bytes20,uint256,uint256)": TypedContractEvent<
      ChallengePeriodRestartEvent.InputTuple,
      ChallengePeriodRestartEvent.OutputTuple,
      ChallengePeriodRestartEvent.OutputObject
    >;
    ChallengePeriodRestart: TypedContractEvent<
      ChallengePeriodRestartEvent.InputTuple,
      ChallengePeriodRestartEvent.OutputTuple,
      ChallengePeriodRestartEvent.OutputObject
    >;

    "ClaimRequest(address,bytes20,uint256,string,string)": TypedContractEvent<
      ClaimRequestEvent.InputTuple,
      ClaimRequestEvent.OutputTuple,
      ClaimRequestEvent.OutputObject
    >;
    ClaimRequest: TypedContractEvent<
      ClaimRequestEvent.InputTuple,
      ClaimRequestEvent.OutputTuple,
      ClaimRequestEvent.OutputObject
    >;

    "Contribution(bytes20,uint256,uint256,uint256,address,uint256,uint8)": TypedContractEvent<
      ContributionEvent.InputTuple,
      ContributionEvent.OutputTuple,
      ContributionEvent.OutputObject
    >;
    Contribution: TypedContractEvent<
      ContributionEvent.InputTuple,
      ContributionEvent.OutputTuple,
      ContributionEvent.OutputObject
    >;

    "CrossChainProxyChanged(address)": TypedContractEvent<
      CrossChainProxyChangedEvent.InputTuple,
      CrossChainProxyChangedEvent.OutputTuple,
      CrossChainProxyChangedEvent.OutputObject
    >;
    CrossChainProxyChanged: TypedContractEvent<
      CrossChainProxyChangedEvent.InputTuple,
      CrossChainProxyChangedEvent.OutputTuple,
      CrossChainProxyChangedEvent.OutputObject
    >;

    "Dispute(address,uint256,uint256,uint256)": TypedContractEvent<
      DisputeEvent.InputTuple,
      DisputeEvent.OutputTuple,
      DisputeEvent.OutputObject
    >;
    Dispute: TypedContractEvent<
      DisputeEvent.InputTuple,
      DisputeEvent.OutputTuple,
      DisputeEvent.OutputObject
    >;

    "DurationsChanged(uint64,uint64,uint64)": TypedContractEvent<
      DurationsChangedEvent.InputTuple,
      DurationsChangedEvent.OutputTuple,
      DurationsChangedEvent.OutputObject
    >;
    DurationsChanged: TypedContractEvent<
      DurationsChangedEvent.InputTuple,
      DurationsChangedEvent.OutputTuple,
      DurationsChangedEvent.OutputObject
    >;

    "Evidence(address,uint256,address,string)": TypedContractEvent<
      EvidenceEvent.InputTuple,
      EvidenceEvent.OutputTuple,
      EvidenceEvent.OutputObject
    >;
    Evidence: TypedContractEvent<
      EvidenceEvent.InputTuple,
      EvidenceEvent.OutputTuple,
      EvidenceEvent.OutputObject
    >;

    "FeesAndRewardsWithdrawn(bytes20,uint256,uint256,uint256,address)": TypedContractEvent<
      FeesAndRewardsWithdrawnEvent.InputTuple,
      FeesAndRewardsWithdrawnEvent.OutputTuple,
      FeesAndRewardsWithdrawnEvent.OutputObject
    >;
    FeesAndRewardsWithdrawn: TypedContractEvent<
      FeesAndRewardsWithdrawnEvent.InputTuple,
      FeesAndRewardsWithdrawnEvent.OutputTuple,
      FeesAndRewardsWithdrawnEvent.OutputObject
    >;

    "GovernorChanged(address)": TypedContractEvent<
      GovernorChangedEvent.InputTuple,
      GovernorChangedEvent.OutputTuple,
      GovernorChangedEvent.OutputObject
    >;
    GovernorChanged: TypedContractEvent<
      GovernorChangedEvent.InputTuple,
      GovernorChangedEvent.OutputTuple,
      GovernorChangedEvent.OutputObject
    >;

    "HumanityClaimed(bytes20,uint256)": TypedContractEvent<
      HumanityClaimedEvent.InputTuple,
      HumanityClaimedEvent.OutputTuple,
      HumanityClaimedEvent.OutputObject
    >;
    HumanityClaimed: TypedContractEvent<
      HumanityClaimedEvent.InputTuple,
      HumanityClaimedEvent.OutputTuple,
      HumanityClaimedEvent.OutputObject
    >;

    "HumanityGrantedManually(bytes20,address,uint64)": TypedContractEvent<
      HumanityGrantedManuallyEvent.InputTuple,
      HumanityGrantedManuallyEvent.OutputTuple,
      HumanityGrantedManuallyEvent.OutputObject
    >;
    HumanityGrantedManually: TypedContractEvent<
      HumanityGrantedManuallyEvent.InputTuple,
      HumanityGrantedManuallyEvent.OutputTuple,
      HumanityGrantedManuallyEvent.OutputObject
    >;

    "HumanityRevoked(bytes20,uint256)": TypedContractEvent<
      HumanityRevokedEvent.InputTuple,
      HumanityRevokedEvent.OutputTuple,
      HumanityRevokedEvent.OutputObject
    >;
    HumanityRevoked: TypedContractEvent<
      HumanityRevokedEvent.InputTuple,
      HumanityRevokedEvent.OutputTuple,
      HumanityRevokedEvent.OutputObject
    >;

    "HumanityRevokedManually(bytes20)": TypedContractEvent<
      HumanityRevokedManuallyEvent.InputTuple,
      HumanityRevokedManuallyEvent.OutputTuple,
      HumanityRevokedManuallyEvent.OutputObject
    >;
    HumanityRevokedManually: TypedContractEvent<
      HumanityRevokedManuallyEvent.InputTuple,
      HumanityRevokedManuallyEvent.OutputTuple,
      HumanityRevokedManuallyEvent.OutputObject
    >;

    "Initialized()": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MetaEvidence(uint256,string)": TypedContractEvent<
      MetaEvidenceEvent.InputTuple,
      MetaEvidenceEvent.OutputTuple,
      MetaEvidenceEvent.OutputObject
    >;
    MetaEvidence: TypedContractEvent<
      MetaEvidenceEvent.InputTuple,
      MetaEvidenceEvent.OutputTuple,
      MetaEvidenceEvent.OutputObject
    >;

    "RenewalRequest(address,bytes20,uint256,string)": TypedContractEvent<
      RenewalRequestEvent.InputTuple,
      RenewalRequestEvent.OutputTuple,
      RenewalRequestEvent.OutputObject
    >;
    RenewalRequest: TypedContractEvent<
      RenewalRequestEvent.InputTuple,
      RenewalRequestEvent.OutputTuple,
      RenewalRequestEvent.OutputObject
    >;

    "RequestBaseDepositChanged(uint256)": TypedContractEvent<
      RequestBaseDepositChangedEvent.InputTuple,
      RequestBaseDepositChangedEvent.OutputTuple,
      RequestBaseDepositChangedEvent.OutputObject
    >;
    RequestBaseDepositChanged: TypedContractEvent<
      RequestBaseDepositChangedEvent.InputTuple,
      RequestBaseDepositChangedEvent.OutputTuple,
      RequestBaseDepositChangedEvent.OutputObject
    >;

    "RequestChallenged(bytes20,uint256,uint256,uint8,uint256,string)": TypedContractEvent<
      RequestChallengedEvent.InputTuple,
      RequestChallengedEvent.OutputTuple,
      RequestChallengedEvent.OutputObject
    >;
    RequestChallenged: TypedContractEvent<
      RequestChallengedEvent.InputTuple,
      RequestChallengedEvent.OutputTuple,
      RequestChallengedEvent.OutputObject
    >;

    "RequestWithdrawn(bytes20,uint256)": TypedContractEvent<
      RequestWithdrawnEvent.InputTuple,
      RequestWithdrawnEvent.OutputTuple,
      RequestWithdrawnEvent.OutputObject
    >;
    RequestWithdrawn: TypedContractEvent<
      RequestWithdrawnEvent.InputTuple,
      RequestWithdrawnEvent.OutputTuple,
      RequestWithdrawnEvent.OutputObject
    >;

    "RequiredNumberOfVouchesChanged(uint64)": TypedContractEvent<
      RequiredNumberOfVouchesChangedEvent.InputTuple,
      RequiredNumberOfVouchesChangedEvent.OutputTuple,
      RequiredNumberOfVouchesChangedEvent.OutputObject
    >;
    RequiredNumberOfVouchesChanged: TypedContractEvent<
      RequiredNumberOfVouchesChangedEvent.InputTuple,
      RequiredNumberOfVouchesChangedEvent.OutputTuple,
      RequiredNumberOfVouchesChangedEvent.OutputObject
    >;

    "RevocationRequest(address,bytes20,uint256,string)": TypedContractEvent<
      RevocationRequestEvent.InputTuple,
      RevocationRequestEvent.OutputTuple,
      RevocationRequestEvent.OutputObject
    >;
    RevocationRequest: TypedContractEvent<
      RevocationRequestEvent.InputTuple,
      RevocationRequestEvent.OutputTuple,
      RevocationRequestEvent.OutputObject
    >;

    "Ruling(address,uint256,uint256)": TypedContractEvent<
      RulingEvent.InputTuple,
      RulingEvent.OutputTuple,
      RulingEvent.OutputObject
    >;
    Ruling: TypedContractEvent<
      RulingEvent.InputTuple,
      RulingEvent.OutputTuple,
      RulingEvent.OutputObject
    >;

    "StakeMultipliersChanged(uint256,uint256,uint256)": TypedContractEvent<
      StakeMultipliersChangedEvent.InputTuple,
      StakeMultipliersChangedEvent.OutputTuple,
      StakeMultipliersChangedEvent.OutputObject
    >;
    StakeMultipliersChanged: TypedContractEvent<
      StakeMultipliersChangedEvent.InputTuple,
      StakeMultipliersChangedEvent.OutputTuple,
      StakeMultipliersChangedEvent.OutputObject
    >;

    "StateAdvanced(address)": TypedContractEvent<
      StateAdvancedEvent.InputTuple,
      StateAdvancedEvent.OutputTuple,
      StateAdvancedEvent.OutputObject
    >;
    StateAdvanced: TypedContractEvent<
      StateAdvancedEvent.InputTuple,
      StateAdvancedEvent.OutputTuple,
      StateAdvancedEvent.OutputObject
    >;

    "VouchAdded(address,address,bytes20)": TypedContractEvent<
      VouchAddedEvent.InputTuple,
      VouchAddedEvent.OutputTuple,
      VouchAddedEvent.OutputObject
    >;
    VouchAdded: TypedContractEvent<
      VouchAddedEvent.InputTuple,
      VouchAddedEvent.OutputTuple,
      VouchAddedEvent.OutputObject
    >;

    "VouchRegistered(bytes20,bytes20,uint256)": TypedContractEvent<
      VouchRegisteredEvent.InputTuple,
      VouchRegisteredEvent.OutputTuple,
      VouchRegisteredEvent.OutputObject
    >;
    VouchRegistered: TypedContractEvent<
      VouchRegisteredEvent.InputTuple,
      VouchRegisteredEvent.OutputTuple,
      VouchRegisteredEvent.OutputObject
    >;

    "VouchRemoved(address,address,bytes20)": TypedContractEvent<
      VouchRemovedEvent.InputTuple,
      VouchRemovedEvent.OutputTuple,
      VouchRemovedEvent.OutputObject
    >;
    VouchRemoved: TypedContractEvent<
      VouchRemovedEvent.InputTuple,
      VouchRemovedEvent.OutputTuple,
      VouchRemovedEvent.OutputObject
    >;

    "VouchesProcessed(bytes20,uint256,uint256)": TypedContractEvent<
      VouchesProcessedEvent.InputTuple,
      VouchesProcessedEvent.OutputTuple,
      VouchesProcessedEvent.OutputObject
    >;
    VouchesProcessed: TypedContractEvent<
      VouchesProcessedEvent.InputTuple,
      VouchesProcessedEvent.OutputTuple,
      VouchesProcessedEvent.OutputObject
    >;
  };
}
